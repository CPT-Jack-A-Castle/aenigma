#!/usr/bin/env bash

### ############################################################################

### initialize script with standard synthia bootstrapping block.

### ############################################################################

#### 1 | add padding to output / clear screen.

echo

#### 2 | locate execution environment and perform synthia-bound operations.

#### ###########################################################################

##### set bash environment error management.

set -eu

##### determine script execution directory and install directory.

if [ -L "${BASH_SOURCE}" ]
then

    ###### this file is being executed via a symlink.
    ###### therefore identify the parent directory of the target file.

    link_target="$(readlink ${BASH_SOURCE})"
    exec_dir="${link_target%/*}"

else

    ###### this file is being directly executed.
    ###### therefore identify our parent directory.

    exec_dir="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

fi

exec_dir_trim_2="$( echo ${exec_dir} | cut -f 1,2,3 -d'/')"
exec_dir_trim_3="$( echo ${exec_dir} | cut -f 1,2,3,4 -d'/')"

if [ -f "${exec_dir_trim_2}/functions" ]
then
	exec_dir_root="${exec_dir_trim_2}"
else
	if [ -f "${exec_dir_trim_3}/functions" ]
	then
		exec_dir_root="${exec_dir_trim_3}"
	else
		echo "Functions file not found in any second or third level parent directory of: | ${exec_dir} |."
		echo
		echo "Exiting..."
		echo
        exit 1
	fi
fi

##### source local functions file.

. "$exec_dir_root/functions"

##### define formatting.

synthia-define_formatting

##### check for root user runtime.

synthia-check_root

#### ###########################################################################

#### 3 | source dna and perform dna-bound operations.

#### ###########################################################################

##### source dna.

synthia-source_dna

##### define variables.

synthia-define_vars

##### read conf settings.

dna-read_conf_settings

##### touch temp dir.

dna-touch_tmp_project_dir

#### ###########################################################################

#### 4 | head/log script.

dna-log_script

### ############################################################################

### evaluate arguments.

### ############################################################################

if [[ "${@#--return-check}" = "$@" ]]
then
    dna-echo -e "This script must not be run directly."
    dna-echo -m "It is only intended to be started at boot time by cron and it should be already running right now on this machine in the background if this node is part of a cluster."
    dna-echo -m "You can see its runtime log at this location: | ${y-}/root/logs/${project_name}-resync_cluster${n-} | and you should get email notifications in case of a | ${r-}running_partitioned_network${n-} | error message appearance."
    dna-exit
fi


### ############################################################################

### actually start script operations.

### ############################################################################

#### ensure reference error file exists.
#### this is the file we monitor for cluster-related errors and trigger the
#### resync accordingly when necessary.

if [ ! -f "/var/log/ejabberd/error.log" ]
then
    dna-echo -e "ejabberd error logfile | ${n-}/var/log/ejabberd/error.log${r-} | not found."
    dna-exit
fi

#### edit all previous instances of "running_partitioned_network" in the logfile
#### so that we won't generate false positives at this run.

sed -i "s|running_partitioned_network|running-partitioned-network|g" "/var/log/ejabberd/error.log"

schedule_ejabberd_restart() {

    ##### a positive result has been found. ejabberd is running in partitioned
    ##### state. define time parameters to schedule an ejabberd reboot in two
    ##### minutes frm now and only once per minute at maximum.

    nh="$(date +"%H")"
    nm="$(date +"%-M")"
    fm=$(( $nm + 2 ))
    if [ $fm -lt 10 ]
    then
            fm=0$fm
    fi
    nt="$nh:$nm"
    ft="$nh:$fm"

    if ! $(atq | grep -q $ft)
    then

        ##### send an email alert.

        dna-send_mail -s "aenigma: ejabberd cluster partitioned" \
        -b "aenigma has detected that ejabberd is running in a partitioned state. ejabberd has been restarted..." \
        -r "${admin_mail}"

        ##### schedule an ejabberd restart in [0-100] seconds from now.

        echo "sleep `head /dev/urandom | tr -dc "0123456789" | head -c2` && /usr/sbin/service ejabberd restart" | at $ft

    fi

}

tail -f "/var/log/ejabberd/error.log" |
while read LOGLINE
do

    [[ "${LOGLINE}" == *"running_partitioned_network"* ]] && schedule_ejabberd_restart

done

### ############################################################################
