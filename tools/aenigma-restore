#!/bin/bash

set -e
set -u

r=$(tput setaf 1)
g=$(tput setaf 2)
l=$(tput setaf 4)
m=$(tput setaf 5)
x=$(tput sgr0)
b=$(tput bold)

scriptname=$(basename "$0")
now="$(date +"%Y-%m-%d_%H-%M-%S")"
echo && echo "Starting $scriptname script on $now..." && echo

################################################################################

# Don't change these! | No trailing slash!
projname="aenigma"
shortname=$projname
sourcedir=/root/$projname
basedir=/root/openspace42
installdir=$basedir/$shortname
backupsdir=$installdir/backups
archivedir=$backupsdir/archive
latestdir=$backupsdir/latest
restoresdir=$installdir/restores
tmpdir=/tmp/$shortname
configdir=$installdir/config
toolsdir=$installdir/tools
tlsdir=/etc/ssl/$shortname
etc_ejab_dir=/etc/ejabberd
var_ejab_dir=/var/lib/ejabberd

if [[ $EUID -ne 0 ]]
then
	echo "${r}${b}This script must be run as root.${x}"
	echo
        # Send email indicating backup aborted
        echo "${b}Exiting...${x}"
        echo
        exit
fi

if [ ! -f $configdir/installcomplete ]
then
	bootstrapmode=on
        echo "${r}${b}It appears aenigma is not currently installed or there is an incomplete installation on this machine.${x}"
        echo
        echo "${b}Now running this restore script in bootstrap mode, therefore we'll be restoring your previous instance's files and settings BEFORE aenigma is actually installed on this machine, and only then will we run the install script.${x}"
	echo
	echo "${b}If you're not trying to restore a previous instance from another machine, please exit this script now and run [or finish running] the install script first.${x}"
	echo
else
	bootstrapmode=off
fi

if [ -f $configdir/blocks3restores ]
then
        echo "${r}${b}NOT performing restore as $configdir/blocks3restores file found.${x}"
        echo
        echo "${b}This should indicate that during the initial installation script you specified your intent to use this machine as a restore for a previous backup on S3, but did NOT have your S3 backups encryption passphrase ready to specify.${x}"
        echo
        echo "${b}If you've since found your passphrase, simply set it in this file:${x}"
	echo
	echo "${b} | $configdir/backupspw | and remove the $configdir/blocks3restores file to restore the S3 backup / restore functionality.${x}"
	echo
	echo "${r}${b}NO restores will run on this instance until you've set your existing S3 backups encryption passphrase.${x}"
	echo
	echo "${b}If you've lost your encryption passphrase, your S3 backups are also lost. Look for a local backup you might have from your old machine to restore your previous instance and, if you find one, re-run this script selecting the | custom | file option.${x}"
	echo
	echo "${b}Otherwise simply re-run the installation without speficying your intent to restore from a previous instance and specify a new S3 bucket in the process.${x}"
	echo
	echo "${b}Also remember to remove the $configdir/blocks3restores file to restore the S3 backup / restore functionality.${x}"
        echo
        echo "${b}Exiting...${x}"
        echo
        exit
fi


if [ $bootstrapmode = "off" ]
then
	choice="${b}Is the backup you're trying to restore stored locally on this machine [i.e. you're trying to restore a previous state of this running instance of aenigma] or is it stored elsewhere [i.e. you're changing machine or your previous machine's data was wiped or lost]? ${x}"
	echo "$choice"
	echo
	options=("backup file stored locally" "backup file stored elsewhere" "exit")
	select opt in "${options[@]}"
	do
	    echo
	    case $opt in
	        "backup file stored locally")
	            restoresource=here
	            break
	            ;;
	        "backup file stored elsewhere")
	            restoresource=elsewhere
	            break
	            ;;
	        "exit")
	            echo "${b}Exiting...${x}"
	            echo
	            exit
	            ;;
	        *)
	            echo "${r}${b}Invalid option. Retry...${x}"
	            echo
	            ;;
	    esac
	done
else
	restoresource=elsewhere
fi



duplicitylogdir="null"

if [ $restoresource = "here" ]
then
        if [ ! -d $archivedir ]
        then
                echo "${r}${b}Local backups directory [$archivedir] not found.${x}"
                echo
                echo "${b}It's possible you've already partially run this restore script choosing the | elsewhere | option, or that this machine never successfully ran a backup.${x}"
                echo
                echo "${b}Check your $installdir for a directory called | backups(-[something]) | and if you find something rename the most recently datestamped directory to | backups | ."
                echo
                echo "${b}Exiting...${x}"
                echo
                exit
        fi

        echo "${b}These are the backup dates available for restore:${x}"
        echo
        ls -1 "$archivedir" | sed -e 's/aenigma-backup-//g' | sed -e 's/.tar.bz2//g'
        echo
        read -rp "${b}[press enter to continue...]${x}"
        clear

        choice="${b}Now choose the file you'd like to restore: ${x}"
        echo "$choice"
        echo

	set +u

        cd $archivedir
        unset options i
        while IFS= read -r -d $'\n' f; do
                options[i++]="$f"
        done < <(find ./ -maxdepth 1 -type f -name "*.tar.bz2" | sort -r )

	set -u

        accept=n
        until [ $accept = "y" ]
        do

                select selbackupfile in "${options[@]}" "exit"
                do
                        echo
                        case $selbackupfile in
                                *.tar.bz2)
                                        echo "${b}Backup file $selbackupfile selected.${x}"
                                        break
                                        ;;
                                "exit")
                                        echo "${b}Exiting...${x}"
                                        echo
                                        exit
                                        ;;
                                *)
                                        echo "${r}${b}Invalid option. Retry...${x}"
                                        echo
                                        ;;
                        esac
                done
                echo

                valid=n
                until [ $valid = "y" ]
                do
                        read -n 1 -rp "${b}Is this the correct file?${x} (${b}Y${x}[es]/${b}n${x}[o]/${b}e${x}[xit]) " answer;
                        case $answer in
                        "")
                                echo
                                valid=y
                                accept=y
                                ;;
                        y)
                                echo -e "\\n"
                                valid=y
                                accept=y
                                ;;
                        n)
                                echo -e "\\n"
                                echo "${b}No problem, please select your desired file again now...${x}"
                                echo
                                valid=y
                                accept=n
                                ;;
                        e)
                                echo -e "\\n"
                                echo "${b}Exiting...${x}"
                                echo
                                exit
                                ;;
                        *)
                                echo -e "\\n"
                                echo "${b}Invalid option. Retry...${x}"
                                echo
                                valid=n
                                accept=n
                                ;;
                        esac
                done

        done

        mkdir -p "$restoresdir/local/"
        tar -xvjf "$selbackupfile" -C "$restoresdir"/local/

else

	if [ $bootstrapmode = "on" ]
	then
		choice="${b}Do you want to restore your previous instance from S3 or from a standalone $shortname backup file you have stored elsewhere? ${x}"
                echo "$choice"
                options=("S3" "elsewhere" "exit")
                select opt in "${options[@]}"
                do
                    echo
                    case $opt in
                        "S3")
                            restoretype=s3
                            break
                            ;;
                        "elsewhere")
                            restoretype=elsewhere
                            break
                            ;;
                        "exit")
                            echo "${b}Exiting...${x}"
                            echo
                            exit
                            ;;
                        *)  echo "${r}${b}Invalid option. Retry...${x}"
                            echo
                            ;;
                    esac
                done
	else
		backuptype="$(cat $configdir/backuptype)"
	        if [ "$backuptype" = "s3" ]
	        then
	                echo "${b}You've previously set up an S3 file storage server connection on this machine.${x}"
	                echo
	                choice="${b}Do you want to restore from S3 or from a standalone aenigma backup file you have stored elsewhere? ${x}"
	                echo "$choice"
	                options=("S3" "elsewhere" "exit")
	                select opt in "${options[@]}"
	                do
	                    echo
	                    case $opt in
	                        "S3")
	                            restoretype=s3
	                            break
	                            ;;
	                        "elsewhere")
	                            restoretype=elsewhere
	                            break
	                            ;;
	                        "exit")
	                            echo "${b}Exiting...${x}"
	                            echo
	                            exit
	                            ;;
	                        *)  echo "${r}${b}Invalid option. Retry...${x}"
	                            echo
	                            ;;
	                    esac
	                done
	        else
	                restoretype=elsewhere
	        fi
	fi



        if [ $restoretype = "s3" ]
        then

		if [ $bootstrapmode = "on" ]
		then

			echo "${b}We now need to set up our S3 file storage server parameters${x}"
			echo

			mkdir -p $configdir/s3/

			declare -A s3array=(
				[awsaki]="AWS Access Key ID"
				[awssak]="AWS Secret Access Key"
				[s3endpoint]="S3 Endpoint URL"
				[s3bucketname]="S3 Bucket Name"
			)

			for i in "${!s3array[@]}"
			do
				if [ -f "$configdir"/s3/"$i" ]
				then
					prevs3var="$(cat "$configdir"/s3/"$i")"
					echo "${g}${b}You previously set your ${s3array[$i]} to be: | $prevs3var | ${x}"
					echo
					read -p "${b}Is this still correct? (Y/n): ${x}" -n 1 -r
					echo
					if [[ ! $REPLY =~ ^[Nn]$ ]]
					then
						echo "${b}Ok, keeping | $prevs3var | as your ${s3array[$i]}${x}"
						echo
						news3var=$prevs3var
					else
						echo
						news3var=notyetset
					fi
				else
					news3var=notyetset
				fi

				if [ $news3var = "notyetset" ]
				then
					defined=n
					until [ $defined = "y" ]
					do
						news3var=""
						until [ ! $news3var = "" ]
						do
							read -rp "${b}Now set your ${s3array[$i]}${x}: " news3var
							echo
						done
						valid=n
						until [ $valid = "y" ]
						do
							read -n 1 -rp "${b}Is | $news3var | correct? (Y/n/e[xit]) ${x}" answer;
							case $answer in
							"")
								echo
								valid=y
								defined=y
								;;
							y)
								echo -e "\\n"
								valid=y
								defined=y
								;;
							n)
								echo -e "\\n"
								echo "${b}Ok, then please try again...${x}"
								echo
								valid=y
								defined=n
								;;
							e)
								echo -e "\\n"
								echo "${b}Exiting...${x}"
								echo
								exit
								;;
							*)
								echo -e "\\n"
								echo "${r}${b}Invalid option. Retry...${x}"
								echo
								valid=n
								defined=n
								;;
							esac
						done
					done
					echo "${b}${s3array[$i]} set to | $news3var | ${x}"
					echo
					echo "$news3var" > "$configdir"/s3/"$i"
				fi
			done

			awsaki="$(cat $configdir/s3/awsaki)"
			awssak="$(cat $configdir/s3/awssak)"
			s3endpoint="$(cat $configdir/s3/s3endpoint)"
			s3bucketname="$(cat $configdir/s3/s3bucketname)"

			echo "----------------"
			echo
			echo "${b}To make sure everything is correct:${x}"
			echo
			echo "1] Your ${b}AWS Access Key ID${x} will be:"
			echo
			echo "${b} | $awsaki | ${x}"
			echo
			echo "2] Your ${b}AWS Secret Access Key${x} will be:"
			echo
			echo "${b} | $awssak | ${x}"
			echo
			echo "3] Your ${b}S3 Endpoint URL${x} will be:"
			echo
			echo "${b} | $s3endpoint | ${x}"
			echo
			echo "4] Your ${b}S3 Bucket Name${x} will be:"
			echo
			echo "${b} | $s3bucketname | ${x}"
			echo
			echo "----------------"
			echo

			read -p "${b}Does everything look all right? (Y/n): ${x}" -n 1 -r
			echo
			if [[ ! $REPLY =~ ^[Nn]$ ]]
			then
				echo "${b}Ok, continuing.${x}"
				echo
			else
				echo
				echo "${b}Ok, no worries. You can re-run this script right now and make the correct choices. Exiting...${x}"
				echo
				exit
			fi
			clear
		fi

		set +e

                echo "Now restoring from S3 to $restoresdir/s3/ ..."

                awsaki="$(cat $configdir/s3/awsaki)"
                awssak="$(cat $configdir/s3/awssak)"
                s3endpoint="$(cat $configdir/s3/s3endpoint)"
                s3bucketname="$(cat $configdir/s3/s3bucketname)"

                # Export some ENV variables so you don't have to type anything
                export AWS_ACCESS_KEY_ID=$awsaki
                export AWS_SECRET_ACCESS_KEY=$awssak
		PASSPHRASE="$(cat "$configdir"/backupspw)"
		export PASSPHRASE

                # Your GPG key
                #GPG_KEY= # Insert GPG key here if using GPG

                # The S3 destination followed by bucket name
                DEST="s3://$s3endpoint/$s3bucketname/$shortname/latest/"

                duplicitylogdir=/root/logs/$shortname-duplicity
		duplicityrestlogdir=$duplicitylogdir/restore

                # Set up some variables for logging
                LOGFILE="$duplicityrestlogdir/restore.log"
                DAILYLOGFILE="$duplicityrestlogdir/restore.daily.log"
                FULLBACKLOGFILE="$duplicityrestlogdir/restore.full.log"
                HOST=$(hostname)
                DATE=$(date +%Y-%m-%d)
                TODAY=$(date +%d%m%Y)

                is_running=$(ps -ef | grep duplicity  | grep python | wc -l)

                if [ ! -d $duplicityrestlogdir ]
                then
                        mkdir -p $duplicityrestlogdir
                fi

                if [ ! -f $FULLBACKLOGFILE ]
                then
                        touch $FULLBACKLOGFILE
                fi

                if [ "$is_running" -eq 0 ]
                then
                        # Clear the old daily log file
                        cat /dev/null > ${DAILYLOGFILE}

                        # Trace function for logging, don't change this
                        trace () {
                                stamp=$(date +%Y-%m-%d_%H:%M:%S)
                                echo "$stamp: $*" >> ${DAILYLOGFILE}
                        }

                        # The source of your backup
                        # SOURCE=$backupsdir/ # Use / for full system backup

                        FULL=
                        tail -1 "${FULLBACKLOGFILE}" | grep "${TODAY}" > /dev/null || true
                        if [ $? -ne 0 -a "$(date +%d)" -eq 1 ]
                        then
                                FULL=full
                        fi;

                        trace "Backup for local filesystem started"

                        trace "... backing up filesystem"

			if [ -d "$restoresdir"/s3/ ]
			then
				rm -r ${restoresdir:?}/s3/
			fi
                        duplicity "${DEST}" "$restoresdir"/s3/ >$tmpdir/duplicity-log 2>&1

                        trace "Backup for local filesystem complete"
                        trace "------------------------------------"

                        # Append the daily log file to the main log file
                        cat "$DAILYLOGFILE" >> $LOGFILE

			if grep -q "No backup chains found" $tmpdir/duplicity-log
			then

				echo "${r}${b}Restore from S3 failed.${x}"
				echo
				echo "${b}It appears there are no backups on the S3 server under the path: | $shortname/latest | [check | $tmpdir/duplicity-log | for messages like: | ${r}No backup chains found${x}${b} |].${x}"
				echo
				echo "${b}Exiting...${x}"
				echo
				exit

			else

				if grep -q "gpg: decryption failed: bad key" $tmpdir/duplicity-log || [ ! -d "$restoresdir"/s3/ ]
				then

					echo "${r}${b}Restore from S3 failed.${x}"
				        echo
				        echo "${b}This is likely due to an incorrect passphrase [check | $tmpdir/duplicity-log | for messages like: | ${r}gpg: decryption failed: bad key${x}${b} |].${x}"
					echo
					echo "${b}Edit the file | $configdir/backupspw | and replace the currently specified passphrase with the old one from your previous machine, then re-run this script.${x}"
					echo
					echo "${b}If you have lost your previous encryption passphrase, you've also lost access to your backups.${x}"
					echo
					echo "${b}Exiting...${x}"
					echo
					exit

				fi

			fi

                        # Reset the ENV variables. Don't need them sitting around
                        unset AWS_ACCESS_KEY_ID
                        unset AWS_SECRET_ACCESS_KEY
                        unset PASSPHRASE

                fi

		set -e

        else

		echo "${b}Ok, restoring from a standalone $shortname backup file.${x}"
		echo
		if [ -d "/root/$shortname-restore/" ]
		then
			rm -r "/root/$shortname-restore/"
		fi
		mkdir -p "/root/$shortname-restore/"
		read -p "${b}Do you have a file called | $shortname-backup-[date].tar.bz2 | [or similar]? (Y/n): ${x}" -n 1 -r
		echo
		if [[ ! $REPLY =~ ^[Nn]$ ]]
		then
			defined=n
			until [ $defined = "y" ]
			do
				exists=n
				until [ $exists = "y" ]
				do
					standalonebackupfile=""
					until [ ! $standalonebackupfile = "" ]
					do
						read -rp "${b}Ok, specify the path to that file now: ${x}" standalonebackupfile
						echo
					done
					if [ -f "$standalonebackupfile" ]
					then
						exists=y
					else
						echo "${r}${b}The specified file does not exists. Please retry...${x}"
						echo
						exists=n
					fi
				done
				valid=n
				until [ $valid = "y" ]
				do
					read -n 1 -rp "${b}Is | $standalonebackupfile | correct? (Y/n/e[xit]) ${x}" answer;
					case $answer in
					"")
						echo
						valid=y
						defined=y
						;;
					y)
						echo -e "\\n"
						valid=y
						defined=y
						;;
					n)
						echo -e "\\n"
						echo "${b}Ok, then please try again...${x}"
						echo
						valid=y
						defined=n
						;;
					e)
						echo -e "\\n"
			        		echo "${b}Exiting...${x}"
			        		echo
			        		exit
			        		;;
					*)
						echo -e "\\n"
						echo "${r}${b}Invalid option. Retry...${x}"
			        		echo
						valid=n
					defined=n
				        ;;
					esac
				done
			done
			echo "${b}Backup file $standalonebackupfile selected.${x}"
			echo
			tar -xvjf "$standalonebackupfile" -C "/root/$shortname-restore/"
			subdir=("/root/$shortname-restore/"*/)
			restoresubdir="$(echo "$subdir" | sed "s|/root/${shortname}-restore/||" | tr -d '/')"
			mv "/root/$shortname-restore/$restoresubdir"/* "/root/$shortname-restore/"
			rm -r "/root/$shortname-restore/$restoresubdir"
		else
			echo "${b}Ok, no problem. Make sure you populate the | /root/$shortname-restore/ | directory with these 4 files/directories from your standalone backup:${x}"
			echo
			echo "${b}1] /root/$shortname-restore/config${x}"
			echo "${b}2] /root/$shortname-restore/ejabberd-mnesia-backup${x}"
			echo "${b}3] /root/$shortname-restore/etc-ejabberd${x}"
			echo "${b}4] /root/$shortname-restore/var-lib-ejabberd${x}"
			echo
			echo "${r}${b}If you don't correctly place all 4 files/directories, the restore will not work correctly [you will be alerted if something is wrong further along this script]${x}"
			echo
			echo "${b}As soon as you're done moving these items into place...${x}"
			echo
			read -rp "${b}[press enter to continue...]${x}"
			clear
		fi

        fi

fi
echo



### Perform a [last] backup of this currently running installation just in case

echo "${b}Now backing up [locally - no S3 of course] this machine's currently running $shortname installation just in case...${x}"
echo

if [ -d $tmpdir ]
then
	rm -r ${tmpdir:?}
fi
mkdir -p $archivedir
### No need to create S3 dir as we're only backing up locally
mkdir -p $tmpdir
backupname=$shortname-backup-$now
tmpbackupdir=$tmpdir/$backupname
mkdir -p "$tmpbackupdir"

### Don't purge backups as this is an extra backup we're doing without specifically asking the user

/usr/sbin/ejabberdctl backup /tmp/ejabberd-mnesia-backup
mv /tmp/ejabberd-mnesia-backup "$tmpbackupdir"/ejabberd-mnesia-backup
cp -r /etc/ejabberd/ "$tmpbackupdir"/etc-ejabberd/
cp -r /var/lib/ejabberd/ "$tmpbackupdir"/var-lib-ejabberd/
cd $tmpdir || exit
# Give local backup a custom name so that it's clear it's the last one before a rollback in time
tar -cvjSf "$archivedir"/"$backupname"-last-backup-before-"$now"-restore.tar.bz2 "$backupname"
echo

### If not restoring a previous state of this same installation, then move the backups directory to an "old" named one.

if [ $restoresource = "here" ]
then
        echo "${b}Backed up current installation to $archivedir.${x}"
        echo
else
	mkdir -p "$backupsdir"/old
        mv "$archivedir" "$backupsdir"/old/archive-old-before-"$now"-restore
	if [ ! $duplicitylogdir = "null" ]
	then
		mkdir -p "$duplicitylogdir"/old
	        mv "$duplicitylogdir"/backup/ "$duplicitylogdir"/old/backup-old-before-"$now"-restore 2> /dev/null || true
	fi
        echo "Backed up current installation to local backups directory and moved the latter to $backupsdir/old/archive-old-before-$now-restore."
        echo
fi



echo "${b}Now restoring $shortname from backup...${x}"
echo



if [ $restoresource = "here" ]
then
        restorefilename="$(echo "$selbackupfile" | sed 's|./||g' | sed 's/-last-backup.*-restore//' | sed 's/.tar.bz2//g')"
        restorefileloc=$restoresdir/local/$restorefilename
else
        if [ $restoretype = "s3" ]
        then
                restorefileloc=$restoresdir/s3/
        else
                restorefileloc="/root/$shortname-restore/"
        fi
fi



### Validate backup file

declare -A restorevalidationarray=(
	[config]="config"
	[mnesia]="ejabberd-mnesia-backup"
	[etc]="etc-ejabberd"
	[var]="var-lib-ejabberd"
)

for i in "${!restorevalidationarray[@]}"
do

	overrideerrors=n

	if [ ! -e "$restorefileloc"/"${restorevalidationarray[$i]}" ]
	then
		echo "${r}${b}${restorevalidationarray[$i]} file/directory NOT found. If you continue, your restore will NOT be complete.${x}"
		echo
		read -p "${b}Do you still wish to continue? (y/N): ${x}" -n 1 -r
		echo
		if [[ $REPLY =~ ^[Yy]$ ]]
		then
			echo "${b}Ok, continuing...${x}"
			echo
			overrideerrors=y
		else
			echo "${b}Ok, exiting...${x}"
			echo
			exit
		fi
	fi

done

if [ $overrideerrors = "y" ]
then
	set +e
fi



echo "${b}1] Now restoring aenigma config directory...${x}"
echo

rsync -aAXx --delete $restorefileloc/config/ $configdir/

echo "${b}2] Now restoring ejabberd database...${x}"
echo

if (( $(ps -ef | grep -v grep | grep ejabberd | wc -l) > 0 ))
then
        echo "${g}${b}ejabberd is already running. Continuing...${x}"
        echo
else
        echo "${r}${b}ejabberd NOT running. Starting it now...${x}"
        echo
        echo "${b}Now starting ejabberd ...${x}"
        /usr/sbin/service ejabberd start
        echo
        sleep 8
        /usr/sbin/ejabberdctl
        echo
        sleep 1
fi

if (( $(ps -ef | grep -v grep | grep ejabberd | wc -l) > 0 ))
then
        cd $restorefileloc
	cp ./ejabberd-mnesia-backup /var/lib/ejabberd/
        /usr/sbin/ejabberdctl restore ejabberd-mnesia-backup
	rm /var/lib/ejabberd/ejabberd-mnesia-backup
        echo "${b}Successfully restored ejabberd database...${x}"
        echo
        sleep 8
else
        echo "${r}${b}ERROR: ejabberd STILL NOT running. Unable to restore database from backup.${x}"
        echo
        echo "${b}Exiting...${x}"
        echo
        exit
fi

echo "${b}Now restoring ejabberd directories...${x}"
echo

echo "${b}Now stopping ejabberd for directory restore...${x}"
echo
/usr/sbin/service ejabberd stop
sleep 8

echo "${b}3] Now syncing ejabberd directories...${x}"
echo

rsync -aAXx --delete $restorefileloc/etc-ejabberd/ /etc/ejabberd/
rsync -aAXx --delete $restorefileloc/var-lib-ejabberd/ /var/lib/ejabberd/

echo "${b}Now setting permissions on ejabberd directories...${x}"
echo

chown -R ejabberd:ejabberd /etc/ejabberd/
chown -R ejabberd:ejabberd /var/lib/ejabberd/

echo "${b}Now starting ejabberd...${x}"
/usr/sbin/service ejabberd start
echo
sleep 16
/usr/sbin/ejabberdctl status
echo
sleep 1

if (( $(ps -ef | grep -v grep | grep ejabberd | wc -l) > 0 ))
then

        echo "${g}${b}Restore complete!${x}"
        echo
        echo "${b}Now please verify your aenigma instance is running correctly and has everything you except it to.${x}"
        echo

        read -p "${b}Has your previous instance of aenigma been restored correctly? (Y/n): ${x}" -n 1 -r
        echo
        if [[ ! $REPLY =~ ^[Nn]$ ]]
        then
                echo "${g}${b}Ok, all done!${x}"
                echo
                if [ -f $configdir/blocks3backups ]
                then
			rm $configdir/blocks3backups
                        echo "${b}Removing S3 backups lock since your restore has been successful.${x}"
                        echo
                        echo "${r}${b}This machine will now pick up where the old one left off and start backing up again to S3 and will overwrite all previous data stored on S3.${x}"
                        echo
                        echo "${b}If you've changed your mind and are NOT yet sure this restore was completely successful, simply:${x}"
                        echo
                        echo "${b} | touch $configdir/blocks3backups |"
                        echo
                        echo "${b}And remember to remove it as soon as you're done verifying this restored instance to then resume backups to S3!${x}"
                        echo
                        echo "${g}${b}All done for now.${x}"
                        echo
                fi
        else
                echo
                echo "${b}Sorry about that, please collect all evidence you can find so and simply file an issue report at:${x}"
        	echo
        	echo "${b} | https://github.com/openspace42/aenigma/issues |${x}"
        	echo
        	echo "${b}Thank you in advance!${x}"
                echo
        fi

else

        echo "${r}${b}ERROR: ejabberd not running after restore. Please check ejabberd directories.${x}"
        echo
        echo "${b}Please collect all evidence you can find so and simply file an issue report at:${x}"
        echo
        echo "${b} | https://github.com/openspace42/aenigma/issues |${x}"
        echo
        echo "${b}Thank you in advance!${x}"
        echo
        echo "${b}Exiting...${x}"
        echo
        exit

fi

if [ -d "$restoresdir/local/" ]
then
	rm -r "$restoresdir/local/"
fi

if [ -d "/root/$shortname-restore/" ]
then
	rm -r "/root/$shortname-restore/"
fi

if [ -d "$tmpdir" ]
then
	rm -r "${tmpdir:?}"
fi

if [ $bootstrapmode = "on" ]
then
	echo "${b}Now that we're finished with the initial restore, it's time to re-run the install script and get this machine up and running with your old instance's files and settings${x}"
	echo
	echo "${b}Running install script now.${x}"
	echo
	echo "${r}${b}Should you exit the install script during its runtime, you can re-run it manually with:${x}"
	echo
	echo "${b} | bash $sourcedir/install.sh | ${x}"
	cd
	bash $sourcedir/install.sh
fi
