#!/bin/bash

r=`tput setaf 1`
g=`tput setaf 2`
x=`tput sgr0`
b=`tput bold`

set -e
set -u

logname=`basename "$0"`
now="$(date +"%Y-%m-%d_%H-%M-%S")"
echo && echo "Starting $logname script on $now..." && echo

sourcedir=/root/aenigma # Don't change! | No trailing slash!
basedir=/root/openspace42 # Don't change! | No trailing slash!
installdir=$basedir/aenigma # Don't change! | No trailing slash!
configdir=$installdir/config # Don't change! | No trailing slash!
toolsdir=$installdir/tools # Don't change! | No trailing slash!
backupsdir=$installdir/backups # Don't change! | No trailing slash!
localbackupsdir=$backupsdir/local # Don't change! | No trailing slash!
s3backupsdir=$backupsdir/s3 # Don't change! | No trailing slash!
restoresdir=$installdir/restores # Don't change! | No trailing slash!
tlsdir=/etc/ssl/aenigma # Don't change! | No trailing slash!
tmpdir=/tmp/aenigma # Don't change! | No trailing slash!

if [[ $EUID -ne 0 ]]
then
	echo "${r}${b}This script must be run as root. Run it as:${x}"
	echo
	echo "sudo bash aenigma/install.sh"
	echo
        echo "${b}Exiting...${x}"
        echo
        exit
fi

if [ ! -f $configdir/installcomplete ]
then
        echo "It appears aenigma is not currently installed or there is an incomplete installation on this machine."
        echo
        echo "This restore script only works on a fully installed aenigma instance."
        echo
        echo "If you're trying to restore your previous machine's backup to this one, please first install aenigma as a brand new instance, then re-run this script."
        echo
        echo "${b}Exiting...${x}"
        echo
        exit
fi

if [ -f $configdir/blocks3restores ]
then
        echo "${r}${b}NOT performing restore as $configdir/blocks3restores file found.${x}"
        echo
        echo "${b}This should indicate that during the initial installation script you specified your intent to use this machine as a restore for a previous backup on S3, but did NOT have your S3 backups encryption passphrase ready to specify.${x}"
        echo
        echo "${b}If you've since found your passphrase, simply set it in this file:${x}"
	echo
	echo "${b} | $configdir/backupspw | and remove the $configdir/blocks3restores file to restore the S3 backup / restore functionality.${x}"
	echo
	echo "${r}${b}NO restores will run on this instance until you've set your existing S3 backups encryption passphrase.${x}"
	echo
	echo "${b}If you've lost your encryption passphrase, your S3 backups are also lost. Look for a local backup you might have from your old machine to restore your previous instance and, if you find one, re-run this script selecting the | custom | file option.${x}"
	echo
	echo "${b}Otherwise simply re-run the installation without speficying your intent to restore from a previous instance and specify a new S3 bucket in the process.${x}"
	echo
	echo "${b}Also remember to remove the $configdir/blocks3restores file to restore the S3 backup / restore functionality.${x}"
        echo
        echo "${b}Exiting...${x}"
        echo
        exit
fi



choice="${b}Is the backup you're trying to restore stored locally on this machine [i.e. you're trying to restore a previous state from this running instance of aenigma] or is it stored elsewhere [i.e. you're changing machine or your previous machine's data was wiped or lost]? ${x}"
echo $choice
echo
options=("backup file stored locally" "backup file stored elsewhere" "exit")
select opt in "${options[@]}"
do
    echo
    case $opt in
        "backup file stored locally")
            restoresource=here
            break
            ;;
        "backup file stored elsewhere")
            restoresource=elsewhere
            break
            ;;
        "exit")
            echo "${b}Exiting...${x}"
            echo
            exit
            ;;
        *)
            echo "${r}${b}Invalid option. Retry...${x}"
            echo
            ;;
    esac
done



if [ $restoresource = "here" ]
then
        if [ ! -d $localbackupsdir ]
        then
                echo "${r}${b}Local backups directory [$localbackupsdir] not found.${x}"
                echo
                echo "${b}It's possible you've already partially run this restore script choosing the | elsewhere | option, or that this machine never successfully ran a backup.${x}"
                echo
                echo "${b}Check your $installdir for a directory called | backups(-[something]) | and if you find something rename the most recently datestamped directory to | backups | ."
                echo
                echo "${b}Exiting...${x}"
                echo
                exit
        fi

        echo "${b}These are the backup dates available for restore:${x}"
        echo
        ls -1 $localbackupsdir | sed -e 's/aenigma-backup-//g' | sed -e 's/.tar.bz2//g'
        echo
        read -p "[press enter to continue...]"
        clear

        choice="${b}Now choose the file you'd like to restore: ${x}"
        echo $choice
        echo

	set +u

        cd $localbackupsdir
        unset options i
        while IFS= read -r -d $'\n' f; do
                options[i++]="$f"
        done < <(find ./ -maxdepth 1 -type f -name "*.tar.bz2" | sort -r )

	set -u

        accept=n
        until [ $accept = "y" ]
        do

                select selbackupfile in "${options[@]}" "exit"
                do
                        echo
                        case $selbackupfile in
                                *.tar.bz2)
                                        echo "${b}Backup file $selbackupfile selected.${x}"
                                        break
                                        ;;
                                "exit")
                                        echo "${b}Exiting...${x}"
                                        echo
                                        exit
                                        ;;
                                *)
                                        echo "${r}${b}Invalid option. Retry...${x}"
                                        echo
                                        ;;
                        esac
                done
                echo

                valid=n
                until [ $valid = "y" ]
                do
                        read -n 1 -p "${b}Is this the correct file?${x} (${b}Y${x}[es]/${b}n${x}[o]/${b}e${x}[xit]) " answer;
                        case $answer in
                        "")
                                echo
                                valid=y
                                accept=y
                                ;;
                        y)
                                echo -e "\n"
                                valid=y
                                accept=y
                                ;;
                        n)
                                echo -e "\n"
                                echo "${b}No problem, please select your desired file again now...${x}"
                                echo
                                valid=y
                                accept=n
                                ;;
                        e)
                                echo -e "\n"
                                echo "${b}Exiting...${x}"
                                echo
                                exit
                                ;;
                        *)
                                echo -e "\n"
                                echo "${b}Invalid option. Retry...${x}"
                                echo
                                valid=n
                                accept=n
                                ;;
                        esac
                done

        done

        mkdir -p $restoresdir/local/
        tar -xvjf $selbackupfile -C $restoresdir/local/

else

        backuptype="$(cat $configdir/backuptype)"

        if [ $backuptype = "s3" ]
        then
                echo "${b}You've previously set up an S3 file storage server connection on this machine.${x}"
                echo
                choice="${b}Do you want to restore from S3 or from a standalone aenigma backup file you have stored elsewhere? ${x}"
                echo $choice
                options=("S3" "elsewhere" "exit")
                select opt in "${options[@]}"
                do
                    echo
                    case $opt in
                        "S3")
                            restoretype=s3
                            break
                            ;;
                        "elsewhere")
                            restoretype=elsewhere
                            break
                            ;;
                        "exit")
                            echo "${b}Exiting...${x}"
                            echo
                            exit
                            ;;
                        *)  echo "${r}${b}Invalid option. Retry...${x}"
                            echo
                            ;;
                    esac
                done
        else
                restoretype=elsewhere
        fi



        if [ $restoretype = "s3" ]
        then

		set +e

                echo "Now restoring from S3 to $restoresdir/s3/ ..."
                echo

                awsaki="$(cat $configdir/s3/awsaki)"
                awssak="$(cat $configdir/s3/awssak)"
                s3endpoint="$(cat $configdir/s3/s3endpoint)"
                s3bucketname="$(cat $configdir/s3/s3bucketname)"

                # Export some ENV variables so you don't have to type anything
                export AWS_ACCESS_KEY_ID=$awsaki
                export AWS_SECRET_ACCESS_KEY=$awssak
                export PASSPHRASE=$configdir/backupspw

                # Your GPG key
                #GPG_KEY= # Insert GPG key here if using GPG

                # The S3 destination followed by bucket name
                DEST="s3://$s3endpoint/$s3bucketname/"

                duplicitylogdir=/root/logs/aenigma-duplicity
		duplicityrestlogdir=$duplicitylogdir/restore

                # Set up some variables for logging
                LOGFILE="$duplicityrestlogdir/restore.log"
                DAILYLOGFILE="$duplicityrestlogdir/restore.daily.log"
                FULLBACKLOGFILE="$duplicityrestlogdir/restore.full.log"
                HOST=`hostname`
                DATE=`date +%Y-%m-%d`
                MAILADDR="$(cat $configdir/adminmail)"
                TODAY=$(date +%d%m%Y)

                is_running=$(ps -ef | grep duplicity  | grep python | wc -l)

                if [ ! -d $duplicityrestlogdir ]
                then
                        mkdir -p $duplicityrestlogdir
                fi

                if [ ! -f $FULLBACKLOGFILE ]
                then
                        touch $FULLBACKLOGFILE
                fi

                if [ $is_running -eq 0 ]
                then
                        # Clear the old daily log file
                        cat /dev/null > ${DAILYLOGFILE}

                        # Trace function for logging, don't change this
                        trace () {
                                stamp=`date +%Y-%m-%d_%H:%M:%S`
                                echo "$stamp: $*" >> ${DAILYLOGFILE}
                        }

                        # How long to keep backups for
                        OLDER_THAN="1M"

                        # The source of your backup
                        # SOURCE=$backupsdir/ # Use / for full system backup

                        FULL=
                        tail -1 ${FULLBACKLOGFILE} | grep ${TODAY} > /dev/null || true
                        if [ $? -ne 0 -a $(date +%d) -eq 1 ]
                        then
                                FULL=full
                        fi;

                        trace "Backup for local filesystem started"

                        trace "... removing old backups"

                        duplicity remove-older-than ${OLDER_THAN} ${DEST} >> ${DAILYLOGFILE} 2>&1

                        trace "... backing up filesystem"

                        rm -r $restoresdir/s3/* 2> /dev/null || true
                        duplicity ${DEST} $restoresdir/s3/

                        trace "Backup for local filesystem complete"
                        trace "------------------------------------"

                        # Send the daily log file by email
                        #cat "$DAILYLOGFILE" | mail -s "Duplicity Backup Log for $HOST - $DATE" $MAILADDR
                        #BACKUPSTATUS=`cat "$DAILYLOGFILE" | grep Errors | awk '{ print $2 }'`
                        BACKUPSTATUS=`cat "$DAILYLOGFILE" | grep -i error | wc -l`
                        if [ "$BACKUPSTATUS" != "0" ]
                        then
                    	   cat "$DAILYLOGFILE" | mail -s "Duplicity Backup Log for $HOST - $DATE" $MAILADDR
                        elif [ "$FULL" = "full" ]
                        then
                            echo "$(date +%d%m%Y_%T) Full Back Done" >> $FULLBACKLOGFILE
                        fi

                        # Append the daily log file to the main log file
                        cat "$DAILYLOGFILE" >> $LOGFILE

                        # Reset the ENV variables. Don't need them sitting around
                        unset AWS_ACCESS_KEY_ID
                        unset AWS_SECRET_ACCESS_KEY
                        unset PASSPHRASE

                fi

		set -e

        else

                echo "${r}${b}Restoring from a custom file is not yet supported. It will be implemented by v0.45's full release.${x}"
		echo
		exit

        fi

fi
echo


# Perform a [last] backup of this currently running installation just in case

echo "${b}Now backing up [locally - no S3 of course] this machine's currently running aenigma installation just in case...${x}"
echo

rm -r $tmpdir/* 2> /dev/null || true
mkdir -p $localbackupsdir
# No need to create S3 dir as we're only backing up locally
mkdir -p $tmpdir
backupname=aenigma-backup-$now
tmpbackupdir=$tmpdir/$backupname
mkdir -p $tmpbackupdir

# Don't purge backups as this is an extra backup we're doing without specifically asking the user

/usr/sbin/ejabberdctl backup /tmp/ejabberd-mnesia-backup
mv /tmp/ejabberd-mnesia-backup $tmpbackupdir/ejabberd-mnesia-backup
cp -r /etc/ejabberd/ $tmpbackupdir/etc-ejabberd/
cp -r /var/lib/ejabberd/ $tmpbackupdir/var-lib-ejabberd/
cd $tmpdir
# Give local backup a custom name so that it's clear it's the last one before a rollback in time
tar -cvjSf $localbackupsdir/$backupname-last-backup-before-$now-restore.tar.bz2 $backupname
echo

# If not restoring a previous state of this same installation, then move the backups directory to an "old" named one.

if [ $restoresource = "here" ]
then
        echo "Backed up current installation to $localbackupsdir."
        echo
else
        mv $localbackupsdir $localbackupsdir-old-before-$now-restore
        mv $duplicitylogdir/backup/ $duplicitylogdir/backup-old-before-$now-restore 2> /dev/null || true
        echo "Backed up current installation to local backups directory and moved the latter to $localbackupsdir-old-before-$now-restore."
        echo
fi



echo "${b}Now restoring aenigma from backup...${x}"
echo

if [ $restoresource = "here" ]
then
        restorefilename="$(echo $selbackupfile | sed 's|./||g' | sed 's/-last-backup.*-restore//' | sed 's/.tar.bz2//g')"
        restorefileloc=$restoresdir/local/$restorefilename/
else
        if [ $restoretype = "s3" ]
        then
                restorefileloc=$restoresdir/s3/
        else
                restorefileloc=/root/aenigma-restore/
        fi
fi

echo "${b}1] Now restoring ejabberd database...${x}"
echo

if (( $(ps -ef | grep -v grep | grep ejabberd | wc -l) > 0 ))
then
        echo "${g}${b}ejabberd is already running. Continuing...${x}"
        echo
else
        echo "${r}${b}ejabberd NOT running. Starting it now...${x}"
        echo
        echo "${b}Now starting ejabberd ...${x}"
        /usr/sbin/service ejabberd start
        echo
        sleep 8
        /usr/sbin/ejabberdctl
        echo
        sleep 1
fi

if (( $(ps -ef | grep -v grep | grep ejabberd | wc -l) > 0 ))
then
        cd $restorefileloc
	cp ./ejabberd-mnesia-backup /var/lib/ejabberd/
        /usr/sbin/ejabberdctl restore ejabberd-mnesia-backup
	rm /var/lib/ejabberd/ejabberd-mnesia-backup
        echo "${b}Successfully restored ejabberd database...${x}"
        echo
        sleep 8
else
        echo "${r}${b}ERROR: ejabberd STILL NOT running. Unable to restore database from backup.${x}"
        echo
        echo "${b}Exiting...${x}"
        echo
        exit
fi

echo "${b}Now restoring ejabberd directories...${x}"
echo

echo "${b}Now stopping ejabberd for directory restore...${x}"
echo
/usr/sbin/service ejabberd stop
sleep 8

echo "${b}2] Now syncing ejabberd directories...${x}"
echo

rsync -aAXx --delete $restorefileloc/etc-ejabberd/ /etc/ejabberd/
rsync -aAXx --delete $restorefileloc/var-lib-ejabberd/ /var/lib/ejabberd/

echo "${b}Now setting permissions on ejabberd directories...${x}"
echo

chown -R ejabberd:ejabberd /etc/ejabberd/
chown -R ejabberd:ejabberd /var/lib/ejabberd/

echo "${b}Now starting ejabberd...${x}"
/usr/sbin/service ejabberd start
echo
sleep 16
/usr/sbin/ejabberdctl status
echo
sleep 1

if (( $(ps -ef | grep -v grep | grep ejabberd | wc -l) > 0 ))
then

        echo "${g}${b}Restore complete!${x}"
        echo
        echo "${b}Now please verify your aenigma instance is running correctly and has everything you except it to.${x}"
        echo

        read -p "${b}Has your previous instance of aenigma been restored correctly? (Y/n): ${x}" -n 1 -r
        echo
        if [[ ! $REPLY =~ ^[Nn]$ ]]
        then
                echo "${g}${b}Ok, all done!${x}"
                echo
                if [ -f $configdir/blocks3backups ]
                then
			rm $configdir/blocks3backups
                        echo "${b}Removing S3 backups lock since your restore has been successful.${x}"
                        echo
                        echo "${r}${b}This machine will now pick up where the old one left off and start backing up again to S3 and will overwrite all previous data stored on S3.${x}"
                        echo
                        echo "${b}If you've changed your mind and are NOT yet sure this restore was completely successful, simply:${x}"
                        echo
                        echo "${b} | touch $configdir/blocks3backups |"
                        echo
                        echo "${b}And remember to remove it as soon as you're done verifying this restored instance to then resume backups to S3!${x}"
                        echo
                        echo "${g}${b}All done for now.${x}"
                        echo
                fi
        else
                echo
                echo "${b}Sorry about that, please collect all evidence you can find so and simply file an issue report at:${x}"
        	echo
        	echo "${b} | https://github.com/openspace42/aenigma/issues |${x}"
        	echo
        	echo "${b}Thank you in advance!${x}"
                echo
        fi

else

        echo "${r}${b}ERROR: ejabberd not running after restore. Please check ejabberd directories.${x}"
        echo
        echo "${b}Please collect all evidence you can find so and simply file an issue report at:${x}"
        echo
        echo "${b} | https://github.com/openspace42/aenigma/issues |${x}"
        echo
        echo "${b}Thank you in advance!${x}"
        echo
        echo "${b}Exiting...${x}"
        echo
        exit

fi
