#!/usr/bin/env bash

################################################################################

### Set bash environment error management

set -eu

### Add padding to output

echo

### Determine script execution directory, install directory, and source local functions file

exec_dir="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

exec_dir_trim_2="$( echo ${exec_dir} | cut -f 1,2,3 -d'/')"
exec_dir_trim_3="$( echo ${exec_dir} | cut -f 1,2,3,4 -d'/')"

if [ -f "${exec_dir_trim_2}/functions" ]
then
	exec_dir_root="${exec_dir_trim_2}"
else
	if [ -f "${exec_dir_trim_3}/functions" ]
	then
		exec_dir_root="${exec_dir_trim_3}"
	else
		echo "Functions file not found in any second or third level parent directory of: | $exec_dir |"
		echo
        exit 1
	fi
fi

. "$exec_dir_root/functions"

### Source openspace functions file

source_os_dna

### Define formatting

dna-define_formatting

### Define variables

define_vars

################################################################################

check_root

dna-head_script

dna-read_conf_settings

################################################################################

### Check / enable clusterization

if [ ! "${cluster_enabled-null}" = "cluster" ]
then
	echo "${r-}${b-}${short_name} was not installed in cluster mode.${x-}"
	echo
	ask_for_boolean_question="Do you wish to turn this instance into a cluster one?"
	dna-ask_for_boolean_def_yes
	if [ "$ask_for_boolean_output" = "y" ]
	then
		echo "${b-}Ok, setting clusterization to enabled.${x-}"
		echo
		dna-set_option -o cluster_enabled -p cluster -s "cluster"
	else
		echo "${b-}Ok, leaving clusterization off for now.${x-}"
		echo
		dna-exit
	fi
fi

### Check / set clusterization mode to primary

if [ -z "${cluster_mode-}" ]
then
	echo "${b-}This script must only be run on the primary node of ${short_name}.${x-}"
	echo
	ask_for_boolean_question="Do you confirm that this will in fact be the primary node for your ${short_name} instance?"
	dna-ask_for_boolean_def_no
	if [ "$ask_for_boolean_output" = "y" ]
	then
		echo "${b-}Ok, proceeding...${x-}"
		echo
		dna-set_option -o cluster_mode -p cluster -s "primary"
	else
		echo "${b-}Ok, no problem. If this is a secondary node all you need to do is run the standard ${short_name} installation and select | secondary | when asked about the node type during clusterization setup.${x-}"
		echo
		dna-exit
	fi
elif [ "${cluster_mode}" = "secondary" ]
then
	echo "${r-}${b-}This script must only be run on the primary node of ${short_name}.${x-}"
	echo
	echo "${b-}You've previously specified during install that this will instead be a secondary node.${x-}"
	echo
	echo "${b-}If that's the case then all you need to do is run the standard ${short_name} installation and select | secondary | when asked about the node type during clusterization setup.${x-}"
	echo
	echo "${b-}Otherwise if you actually intend to use this machine as your primary node, simply re-run the standard installation and specify so when promted.${x-}"
	echo
else
	echo "${g-}${b-}${short_name} clusterization mode already set to: | ${x-}${b-}primary${g-} |.${x-}"
	echo
fi

ask_for_boolean_question="Have you already started the ${short_name} installation on your secondary node?"
dna-ask_for_boolean_def_yes
if [ "$ask_for_boolean_output" = "y" ]
then
	echo "${b-}Ok, continuing...${x-}"
	echo
else
	echo "${b-}Ok, no problem. Start the installation [or re-installation] on your secondary node now from scratch just by running the standard: | bash ${short_name}/setup | command.${x-}"
	echo
	echo "${b-}When prompted to start this very script come back here and continue on.${x-}"
	echo
	read -rp "${b-}[press enter to continue...]${x-}"
fi

################################################################################

### Ensure the nodes_db files are up to date with the IP address[es] of this machine

aenigma-initialize_nodes_db_files

################################################################################

### Now add the secondary node's IPv4 to nodes_db_ipv4

read -rp "${b-}Now enter the public IPv4 address displayed on your secondary node: ${x-}"
echo

secondary_node_ipv4="${REPLY}"

if grep -q "${secondary_node_ipv4}" "${nodes_db_ipv4_path}"
then
	### Specified secondary node is already registered
	secondary_node_number="$(grep -n "${secondary_node_ipv4}" "${nodes_db_ipv4_path}" | grep -Eo '^[^:]+' | xargs printf %02d)"
	echo "${b-}The server with IPv4 | ${y-}${secondary_node_ipv4}${n-} | is already registered as part of this cluster with node number | ${o-}${secondary_node_number}${n-} |.${x-}"
	echo
	ask_for_boolean_question="Would you like to re-provision it?"
	dna-ask_for_boolean_def_yes
	if [ "$ask_for_boolean_output" = "y" ]
	then
		echo "${b-}Ok, re-provisioning node number | ${o-}${secondary_node_number}${n-} |...${x-}"
		echo
	else
		echo "${b-}Ok, skipping re-provisioning for node | ${o-}${secondary_node_number}${n-} |.${x-}"
		echo
		dna-exit
	fi
else
	### Specified secondary node is new to this cluster
	echo "${secondary_node_ipv4}" >> "${nodes_db_ipv4_path}"
	secondary_node_number="$(grep -n "${secondary_node_ipv4}" "${nodes_db_ipv4_path}" | grep -Eo '^[^:]+' | xargs printf %02d)"
	echo "${b-}Ok, added server with IPv4 | ${y-}${secondary_node_ipv4}${n-} | to this cluster with node number | ${o-}${secondary_node_number}${n-} |.${x-}"
	echo
fi

aenigma-create_nodes_db_numbered

################################################################################

### Generate or read and print the clusterization SSH pubkey and prompt the user to configure it on the seondary node

if [ ! -f "/root/.ssh/aenigma_cluster.pub" ]
then
	dna-generate_ssh_keypair -n "aenigma_cluster"
fi

	ssh_keypair_pubkey_path="/root/.ssh/aenigma_cluster.pub"

echo "${b-}Now, when prompted, enter the following SSH public key on the secondary node:${x-}"
echo
echo "${y-}${b-}$(cat ${ssh_keypair_pubkey_path})${x-}"
echo
read -rp "${b-}[press enter when done to continue...]${x-}"
clear

if ssh -p42022 -o "LogLevel=ERROR" -o "StrictHostKeyChecking no" -o "UserKnownHostsFile=/dev/null" -i "/root/.ssh/aenigma_cluster" "root@${secondary_node_ipv4}" exit
then
	echo "${g-}${b-}SSH connection to secondary node succeeded.${x-}"
	echo
else
	echo "${r-}${b-}SSH connection to secondary node failed.${x-}"
	echo
	echo "${b-}Please ensure the secondary node's IPv4 address is actually | ${y}${secondary_node_ipv4}${x-}${b-} |, that its SSH port is | ${y}42022${x-}${b-} |, and that its firewall isn't blocking connections on that port.${x-}"
	echo
	dna-exit
fi

### Fetch and prompt user to confirm the clusterization token visualised on the secondary node to ensure we're speaking to the right machine

if secondary_node_token="$(ssh -p42022 -o "LogLevel=ERROR" -o "StrictHostKeyChecking no" -o "UserKnownHostsFile=/dev/null" -i "/root/.ssh/aenigma_cluster" "root@${secondary_node_ipv4}" cat /tmp/aenigma_cluster_token)"
then
	echo "${g-}${b-}Token on secondary node correctly found.${x-}"
	echo
	echo "${b-}Its value is: | ${y-}${secondary_node_token}${n-} |.${x-}"
	echo
	ask_for_boolean_question="Does this token match what you see on the secondary node?"
	dna-ask_for_boolean_def_yes
	if [ "$ask_for_boolean_output" = "y" ]
	then
		echo "${b-}Ok, continuing...${x-}"
		echo
	else
		echo "${b-}No problem. Please ensure the secondary node in question's IPv4 address is actually | ${y}${secondary_node_ipv4}${n-} | and try again.${x-}"
		echo
		dna-exit
	fi
else
	echo "${r-}${b-}Token on secondary node not found.${x-}"
	echo
	echo "${b-}Please ensure you've followed the configuration steps on your secondary node up to the point where it displays the clusterization token and try again.${x-}"
	echo
	dna-exit
fi

################################################################################

#### Add blank line to nodes_db_ipv6 if it doesn't yet exist for sed matching below

nodes_db_ipv6_lines="$(wc -l < ${nodes_db_ipv6_path})"
if [ "${nodes_db_ipv6_lines}" -lt "${secondary_node_number}" ]
then
	echo " " >> "${nodes_db_ipv6_path}"
fi

#### If token is an IPv6 address then import it here and add it to nodes_db_ipv6 otherwise specify lack thereof

echo "${secondary_node_token}" > "/tmp/secondary_node_token"

if grep -q ":" "/tmp/secondary_node_token"
then
	### The secondary node is IPv6 enabled, add this to nodes_db_ipv6
	secondary_node_ipv6="$(cat /tmp/secondary_node_token)"
	sed -i "${secondary_node_number}s/.*/${secondary_node_ipv6}/" "${nodes_db_ipv6_path}"
else
	### The secondary node is NOT IPv6 enabled, specify this in nodes_db_ipv6
	sed -i "${secondary_node_number}s/.*/null/" "${nodes_db_ipv6_path}"
fi

################################################################################

### Update routing info on this [the primary] node

aenigma-update_routing_info

### Push and update routing info on all secondary nodes [both existing and the new one we're now provisioning] to allow them to connect to each other correctly.

aenigma-push_routing_info

################################################################################

### Perform updated DNS checks based on the newly registered information about the secondary node

aenigma-perform_dns_checks

################################################################################

### Push node_number to secondary node

echo "${secondary_node_number}" > /tmp/aenigma_cluster_secondary_node_number
/usr/bin/scp -P42022 -o "LogLevel=ERROR" -o "StrictHostKeyChecking no" -o "UserKnownHostsFile=/dev/null" -i "/root/.ssh/aenigma_cluster" "/tmp/aenigma_cluster_secondary_node_number" "root@${secondary_node_ipv4}:${conf_cluster_dir}/node_number"

### Push config to secondary node

/usr/bin/scp -P42022 -o "LogLevel=ERROR" -o "StrictHostKeyChecking no" -o "UserKnownHostsFile=/dev/null" -i "/root/.ssh/aenigma_cluster" "${conf_dir}/xmpp/domain" "root@${secondary_node_ipv4}:${conf_dir}/xmpp/"
/usr/bin/scp -P42022 -o "LogLevel=ERROR" -o "StrictHostKeyChecking no" -o "UserKnownHostsFile=/dev/null"  -i "/root/.ssh/aenigma_cluster" "/var/lib/ejabberd/.erlang.cookie" "root@${secondary_node_ipv4}:${conf_cluster_dir}"

### Push wildcard LE TLS cert for $domain to secondary node

/usr/bin/scp -P42022 -o "LogLevel=ERROR" -o "StrictHostKeyChecking no" -o "UserKnownHostsFile=/dev/null" -i /root/.ssh/aenigma_cluster -r "${tls_dir}" "root@${secondary_node_ipv4}:/etc/ssl/"

echo

################################################################################

### Prompt the user to finish the installation on secondary node by following the next steps on the other node

echo "${g-}${b-}Primary_node-level configuration complete.${x-}"
echo
echo "${b-}Please continue the installation on the secondary node by following the remaining steps on the installation.${x-}"
echo
