#!/usr/bin/env bash

################################################################################
################################################################################
################################################################################

################################################################################

### initialize script with standard synthia bootstrapping block.

################################################################################

### 1 | add padding to output.

echo

################################################################################

#### 2 | locate execution environment and perform synthia-bound operations.

##### set bash environment error management.

set -eu

##### determine script execution directory and install directory.

if [ -L "${BASH_SOURCE}" ]
then

    ### this file is being executed via a symlink.
    ### therefore identify the parent directory of the target file.

    link_target="$(readlink ${BASH_SOURCE})"
    exec_dir="${link_target%/*}"

else

    ### this file is being directly executed.
    ### therefore identify our parent directory.

    exec_dir="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

fi

exec_dir_trim_2="$( echo ${exec_dir} | cut -f 1,2,3 -d'/')"
exec_dir_trim_3="$( echo ${exec_dir} | cut -f 1,2,3,4 -d'/')"

if [ -f "${exec_dir_trim_2}/functions" ]
then
	exec_dir_root="${exec_dir_trim_2}"
else
	if [ -f "${exec_dir_trim_3}/functions" ]
	then
		exec_dir_root="${exec_dir_trim_3}"
	else
		echo "Functions file not found in any second or third level parent directory of: | ${exec_dir} |."
		echo
		echo "Exiting..."
		echo
        exit 1
	fi
fi

##### source local functions file.

. "$exec_dir_root/functions"

##### define formatting.

synthia-define_formatting

##### check for root user runtime.

synthia-check_root

################################################################################

#### 3 | source dna and perform dna-bound operations.

##### source dna.

synthia-source_dna

##### define variables.

synthia-define_vars

##### read conf settings.

dna-read_conf_settings

##### touch temp dir.

dna-touch_tmp_project_dir

################################################################################

#### 4 | head/log script.

dna-head_script

################################################################################
################################################################################

### actually start script operations.

################################################################################

#### evaluate arguments.

################################################################################

while getopts ":e" arguments
do
    case $arguments in
        e)	force_reinstall_etcd_cluster="yes"
            ;;
        \?)	dna-echo -e "Invalid option | ${n-}-${OPTARG}${r-} | for function | ${n-}${FUNCNAME[0]}${r-} |."
            dna-exit
            ;;
    esac
done
OPTIND=1

################################################################################
################################################################################

#### check / enable clusterization.

################################################################################

if [ ! "${cluster_enabled-null}" = "cluster" ]
then
	dna-echo -e "${proj_name} was not installed in cluster mode."
	dna-ask_for_boolean -d "y" -q "Do you wish to turn this instance into a cluster one?"
	if [ "${boolean_output}" = "y" ]
	then
		dna-echo -m "Ok, setting clusterization to enabled."
		dna-set_option -o cluster_enabled -p cluster -s "cluster"
	else
		dna-echo -m "Ok, leaving clusterization off for now."
		dna-exit
	fi
fi

################################################################################
################################################################################

################################################################################
################################################################################
################################################################################
