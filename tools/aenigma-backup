#!/bin/bash

# All in One Bash Logger | v0.46 | 20171018 | 20171107 | Nk

logname=`basename "$0"`                                      # The name of this script
now="$(date +"%Y-%m-%d_%H-%M-%S")"                           # The current timestamp
logdir="/root/logs/$logname"                                 # Don't store anything else than logs in here!
logfile="$logdir/$now"                                       # The new logfile
mkdir -p $logdir                                             # Touch the dir
touch $logfile                                               # Touch the file
rm $logdir/latest-log 2> /dev/null                           # Remove the old latest-log symlink
ln -s $logfile $logdir/latest-log                            # Recreate the symlink
( cd $logdir && rm `ls -t | awk 'NR>43'` ) 2> /dev/null      # Delete all logs older than the newest 42
exec >  >(tee -ia $logfile)                                  # Log one output to logfile
exec 2> >(tee -ia $logfile >&2)                              # Log the other output to logfile
echo && echo "Starting $logname script on $now..." && echo   # Write heading to logfile

sourcedir=/root/aenigma # Don't change! | No trailing slash!
basedir=/root/openspace42 # Don't change! | No trailing slash!
installdir=$basedir/aenigma # Don't change! | No trailing slash!
configdir=$installdir/config # Don't change! | No trailing slash!
toolsdir=$installdir/tools # Don't change! | No trailing slash!
backupsdir=$installdir/backups # Don't change! | No trailing slash!
restoresdir=$installdir/restores # Don't change! | No trailing slash!
tlsdir=/etc/ssl/aenigma # Don't change! | No trailing slash!
tmpdir=/tmp/aenigma # Don't change! | No trailing slash!

rm -r $tmpdir/* 2> /dev/null
mkdir -p $backupsdir
mkdir -p $tmpdir
backupname=aenigma-backup-$now
tmpbackupdir=$tmpdir/$backupname
mkdir -p $tmpbackupdir

# Purge backups older than the latest 42
( cd $backupsdir && rm `ls -t | awk 'NR>42'` ) 2> /dev/null

/usr/sbin/ejabberdctl backup /tmp/ejabberd-mnesia-backup
mv /tmp/ejabberd-mnesia-backup $tmpbackupdir/ejabberd-mnesia-backup
cp -r /etc/ejabberd/ $tmpbackupdir/etc-ejabberd/
cp -r /var/lib/ejabberd/ $tmpbackupdir/var-lib-ejabberd/
cd $tmpdir
tar -cvjSf $backupsdir/$backupname.tar.bz2 $backupname
rm -r $tmpbackupdir

backuptype="$(cat $configdir/backuptype)"

if [ $backuptype = "s3" ]
then

        echo
        echo "Now uploading to S3..."
        echo

        awsaki="$(cat $configdir/s3/awsaki)"
        awssak="$(cat $configdir/s3/awssak)"
        s3endpoint="$(cat $configdir/s3/s3endpoint)"
        s3bucketname="$(cat $configdir/s3/s3bucketname)"

        # Export some ENV variables so you don't have to type anything
        export AWS_ACCESS_KEY_ID=$awsaki
        export AWS_SECRET_ACCESS_KEY=$awssak
        export PASSPHRASE=$configdir/backupspw

        # Your GPG key
        #GPG_KEY= # Insert GPG key here if using GPG

        # The S3 destination followed by bucket name
        DEST="s3://$s3endpoint/$s3bucketname/"

        duplicitylogdir=/root/logs/aenigma-duplicity

        # Set up some variables for logging
        LOGFILE="$duplicitylogdir/backup/backup.log"
        DAILYLOGFILE="$duplicitylogdir/backup/backup.daily.log"
        FULLBACKLOGFILE="$duplicitylogdir/backup/backup.full.log"
        HOST=`hostname`
        DATE=`date +%Y-%m-%d`
        MAILADDR="$(cat $configdir/adminmail)"
        TODAY=$(date +%d%m%Y)

        is_running=$(ps -ef | grep duplicity  | grep python | wc -l)

        if [ ! -d $duplicitylogdir ]
        then
                mkdir -p $duplicitylogdir
        fi

        if [ ! -f $FULLBACKLOGFILE ]
        then
                touch $FULLBACKLOGFILE
        fi

        if [ $is_running -eq 0 ]
        then
                # Clear the old daily log file
                cat /dev/null > ${DAILYLOGFILE}

                # Trace function for logging, don't change this
                trace () {
                        stamp=`date +%Y-%m-%d_%H:%M:%S`
                        echo "$stamp: $*" >> ${DAILYLOGFILE}
                }

                # How long to keep backups for
                OLDER_THAN="1M"

                # The source of your backup
                SOURCE=$backupsdir/ # Use / for full system backup

                FULL=
                tail -1 ${FULLBACKLOGFILE} | grep ${TODAY} > /dev/null
                if [ $? -ne 0 -a $(date +%d) -eq 1 ]
                then
                        FULL=full
                fi;

                trace "Backup for local filesystem started"

                trace "... removing old backups"

                duplicity remove-older-than ${OLDER_THAN} ${DEST} >> ${DAILYLOGFILE} 2>&1

                trace "... backing up filesystem"

                #    duplicity \
                #        ${FULL} \
                #        --encrypt-key=${GPG_KEY} \
                #        --sign-key=${GPG_KEY} \
                #        --include=/var/rsnap-mysql \
                #        --include=/var/www \
                #        --include=/etc \
                #        --exclude=/** \
                #        ${SOURCE} ${DEST} >> ${DAILYLOGFILE} 2>&1

                duplicity ${FULL} ${SOURCE} ${DEST} # Insert --encrypt-key and --sign-key after ${FULL} if using GPG

                trace "Backup for local filesystem complete"
                trace "------------------------------------"

                # Send the daily log file by email
                #cat "$DAILYLOGFILE" | mail -s "Duplicity Backup Log for $HOST - $DATE" $MAILADDR
                #BACKUPSTATUS=`cat "$DAILYLOGFILE" | grep Errors | awk '{ print $2 }'`
                BACKUPSTATUS=`cat "$DAILYLOGFILE" | grep -i error | wc -l`
                if [ "$BACKUPSTATUS" != "0" ]
                then
                        cat "$DAILYLOGFILE" | mail -aFrom:"aenigma@$HOST" -s "ERROR in aenigma backup for $HOST on $DATE" $MAILADDR
                elif [ "$FULL" = "full" ]
                then
                        echo "$(date +%d%m%Y_%T) Full Back Done" >> $FULLBACKLOGFILE
                fi

                # Append the daily log file to the main log file
                cat "$DAILYLOGFILE" >> $LOGFILE

                # Reset the ENV variables. Don't need them sitting around
                unset AWS_ACCESS_KEY_ID
                unset AWS_SECRET_ACCESS_KEY
                unset PASSPHRASE

        fi

fi

echo end
