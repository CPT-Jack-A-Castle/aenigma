#!/bin/bash

echo "${g}aenigma.xyz ejabberd installer by openspace [https://github.com/openspace42/aenigma]${x}"
echo
echo "aenigma v0.44"
echo

set -e

sourcedir=/root/aenigma # Don't change! | No trailing slash!
installdir=/root/os-aenigma # Don't change! | No trailing slash!
tlsdir=/etc/ssl/aenigma # Don't change! | No trailing slash!
mkdir -p $tlsdir

r=`tput setaf 1`
g=`tput setaf 2`
x=`tput sgr0`
b=`tput bold`

if [ -d $installdir ]
then
	previnstall=y
	echo "${g}${b}Found a previous install of aenigma.${x}"
	echo
	read -p "${b}Skip the introduction on XMPP basics? (Y/n): ${x}" -n 1 -r
	echo
	if [[ ! $REPLY =~ ^[Nn]$ ]]
	then
		echo "${b}Ok, continuing...${x}"
		echo
		skipintro=y
	else
		echo
		skipintro=n
	fi
else
	mkdir -p $installdir
	previnstall=n
	skipintro=n
fi

if [ $skipintro = "n" ]
then

	echo "0] First of all, a little introduction on how XMPP actually works"
	echo
	echo "XMPP works a little bit like email. You can have a domain [amsterdamhacklab.xyz] and receive email for that domain on a server located at mx01.amsterdamhacklab.xyz, by using the appropriate DNS configuration, and also have other servers [webserver, mapserver, etc...] on other subdomains. In that case, a DNS "MX" record tells sending servers to direct mail intended for amsterdamhacklab.xyz to mx01.amsterdamhacklab.xyz."
	echo
	echo "In the same way, the XMPP server for amsterdamhacklab.xyz can be located at xmpp.amsterdamhacklab.xyz and a DNS "SRV" record tells any sending servers that XMPP for that domain [i.e. a message directed to mark@amsterdamhacklab.xyz] is handled by the server located at xmpp.amsterdamhacklab.xyz."
	echo
	read -p "[press enter to continue reading...]"
	clear

	echo "1] Now, if the domain for which you're setting up your new aenigma server is a domain connected to a bigger project, for which XMPP is just another way of getting in touch with you, definitely set things up like this by using the first option."
	echo
	echo "This will give you working @domain.tld xmpp account addresses, but the aenigma server will reside at subdomain.domain.tld, as in the following example."
	echo
	echo "Main domain:          amsterdamhacklab.xyz."
	echo "Website:              amsterdamhacklab.xyz / www.amsterdamhacklab.xyz [hosted by another server]."
	echo "Your XMPP address:    mark@amsterdamhacklab.xyz."
	echo "XMPP server:          xmpp.amsterdamhacklab.xyz"
	echo
	echo "PROs:                 a] clean addresses [no mark@xmpp.amsterdamhacklab.xyz stuff]"
	echo "                      b] more logical setup."
	echo "CONs:                 a] requires TLS [SSL] certificate for the top level domain [amsterdamhacklab.xyz]"
	echo "                         to be copied over to your new aenigma server [not hard at all, can be automated, see below]"
	echo
	read -p "[press enter to continue reading...]"
	clear

	echo "2] If instead your domain [i.e. aenigmapod42.im] is only intended to be used for your shiny new aenigma server, and you don't need other, different servers [a webserver for instance] managing different aspects of your project, you can do as so:"
	echo
	echo "Set your aenigma server to be located directly at your top level domain, therefore responding directly to amsterdamhacklab.xyz."
	echo
	echo "Your server hostname:  aenigmapod42.im"
	echo "Your addresses:        mark@aenigmapod42.im."
	echo
	echo "PROs:                  a] clean addresses"
	echo "                       b] no separate TLS certificate needed."
	echo "CONs:                  a] your domain must be logically dedicated to your aenigma server"
	echo "                          and not to a wider project."
	echo
	read -p "[press enter to continue reading...]"
	clear

	echo "3] In a third, although NOT suggested case, if you have a domain tied to a wider project [i.e. amsterdamhacklab.xyz] but you don't mind having longer and more complex XMPP account addresses [like mark@xmpp.amsterdamhacklab.xyz], you can choose the third option."
	echo
	echo "Your server hostname:  subdomain.domain.tld"
	echo "Your addresses:        mark@subdomain.domain.tld."
	echo
	echo "PROs:                  a] domain can be logically connected to other stuff and different servers"
	echo "                          with no separate TLS certificate needed."
	echo "CONs:                  a] longer and more complex addresses"
	echo "                       b] not logically 'clean'."
	echo
	read -p "[press enter to continue reading...]"
	clear

	echo "Now that you know how XMPP works, make your choice and let's get your brand new aenigma server up and running!"
	echo
	echo "----------------"
	echo

fi

if [ -f $installdir/configoption ]
then
	prevconfigoption="$(cat $installdir/configoption)"
	case "$prevconfigoption" in
	    1|2|3)
		validprevconfigoption=y
		;;
	    *)
		validprevconfigoption=n
		;;
	esac
else
	touch $installdir/configoption
	validprevconfigoption=n
fi

if [ $validprevconfigoption = "y" ]
then
	echo "${g}${b}You previously chose configuration option | $prevconfigoption |${x}"
	echo
	read -p "${b}Keep this option for this installation as well? (Y/n): ${x}" -n 1 -r
	echo
	if [[ ! $REPLY =~ ^[Nn]$ ]]
	then
		configoption=$prevconfigoption
	else
		echo
		configoption=notyetset
	fi
else
	configoption=notyetset
fi

if [ $configoption = "notyetset" ]
then
	choice='${b}Please select your desired configuration option: ${x}'
	echo $choice
	options=("configuration 1" "configuration 2" "configuration 3" "exit")
	select opt in "${options[@]}"
	do
	    echo
	    case $opt in
		"configuration 1")
		    echo "1" > $installdir/configoption
		    configoption=1
		    break
		    ;;
		"configuration 2")
		    echo "2" > $installdir/configoption
		    configoption=2
		    break
		    ;;
		"configuration 3")
		    echo "3" > $installdir/configoption
		    configoption=3
		    break
		    ;;
		"exit")
		    echo "${b}Exiting...${x}"
		    echo
		    exit
		    ;;
		*)  echo "${r}${b}Invalid option. Retry...${x}"
		    echo
		    ;;
	    esac
	done
fi

if [ -f $installdir/domain ]
then
	prevdomain="$(cat $installdir/domain)"
else
	prevdomain="nx"
fi

if [ ! $configoption = "3" ]
then

	echo "${b}Ok, you've chosen option $configoption.${x}"
	echo
	if [ ! $prevdomain = "nx" ]
	then
		echo "${g}${b}The domain used for your previous aenigma installation is:${x}"
		echo
		echo " | $prevdomain |"
		echo
		read -p "${b}Keep this domain for this installation as well? (Y/n): ${x}" -n 1 -r
		echo
		if [[ ! $REPLY =~ ^[Nn]$ ]]
		then
			echo "${b}Ok, using previous domain: | $prevdomain |${x}"
			echo
			domain=$prevdomain
			changedomain=n
		else
			echo
			echo "${b}Ok, changing domain...${x}"
			echo
			changedomain=y
		fi
	else
		changedomain=y
	fi

	if [ $changedomain = "y" ]
	then

		echo "${b}- * - !!! - * - !!! - * - !!! - * - !!! - * - !!! - * - !!! - * - !!! - * - !!! -${x}"
		echo
		echo "${r}${b}WARNING:${x}"
		echo
		echo "${r}${b}Changing domains will not preserve any user accounts or data. It will revert this server to a fresh install.${x}"
		echo
		echo "${b}In the future, all user accounts and data for the previous domain might be recovered automatically if you ever re-run the install and select the old domain, but this hasn't been thoroughly tested yet."
		echo
		echo "${b}If you abort the domain change operation now, nothing will be deleted.${x}"
		echo
		echo "${b}- * - !!! - * - !!! - * - !!! - * - !!! - * - !!! - * - !!! - * - !!! - * - !!! -${x}"
		echo
		read -p "${b}Are you absolutely sure you want to change the XMPP domain now? (y/N): ${x}" -n 1 -r
		echo
		if [[ $REPLY =~ ^[Yy]$ ]]
		then
			clear
			defined=n
			until [ $defined = "y" ]
			do
				newdomain=""
				until [ ! $newdomain = "" ]
				do
					read -p "${b}Now set your top level domain, which will also be the part after the @ in your XMPP account addresses: ${x}" newdomain
					echo
				done
				valid=n
				until [ $valid = "y" ]
				do
					read -n 1 -p "${b}Is | $newdomain | correct? (Y/n/e[xit]) ${x}" answer;
					case $answer in
					"")
						echo
						valid=y
						defined=y
						;;
					y)
						echo -e "\n"
						valid=y
						defined=y
						;;
					n)
						echo -e "\n"
						echo "${b}Ok, then please try again...${x}"
						echo
						valid=y
						defined=n
						;;
					e)
						echo -e "\n"
		        			echo "${b}Exiting...${x}"
		        			echo
		        			exit
		        			;;
					*)
						echo -e "\n"
						echo "${r}${b}Invalid option. Retry...${x}"
		        			echo
						valid=n
						defined=n
			        		;;
					esac
				done
			done
			echo $newdomain > $installdir/domain
			echo "${b}New hostname set to | $newdomain |${x}"
			echo
			domain="$(cat $installdir/domain)"
		else
			clear
			domain=$prevdomain
			echo "${b}Aborting domain change. Keeping old domain | $domain |${x}"
			echo
		fi

	fi

else

	echo "${b}Ok, you've chosen option 3.${x}"
	echo
	echo "${b}Your domain [the part after the @ in your XMPP account addresses] will match your server hostname.${x}"
	echo

fi

currhostname="$(cat /etc/hostname)"

if [ ! $configoption = "2" ]
then

	if [ $configoption = "1" ]
	then
		echo "${b}Your hostname must be a third level domain [subdomain] of either $domain or another domain.${x}"
		echo
	elif [ $configoption = "3" ]
	then
		echo "${b}Your hostname must be a third level domain [subdomain] of your main domain.${x}"
		echo
	fi

	echo "${g}${b}Your current hostname is:${x}"
	echo
	echo " | $currhostname |"
	echo

	if [ $configoption = "3" ]
	then
		echo "${b}Make sure it is a subdomain of your main domain, and is it what you want it to be.${x}"
		echo
	fi

	read -p "${b}Keep this hostname? (Y/n): ${x}" -n 1 -r
	echo
	if [[ ! $REPLY =~ ^[Nn]$ ]]
	then
		echo "${b}Ok, leaving hostname set to | $currhostname |${x}"
		echo
		changehostname=n
		hostname=$currhostname
	else
		echo
		echo "${b}Ok, changing hostname...${x}"
		echo
		changehostname=y
	fi

	if [ $changehostname = "y" ]
	then
		defined=n
		until [ $defined = "y" ]
		do
			newhostname=""
			until [ ! $newhostname = "" ]
			do
				if [ $configoption = "1" ]
				then
					read -p "${b}Now set your hostname, which must be a third level domain [subdomain] of either $domain or another domain: ${x}" newhostname
					echo
				elif [ $configoption = "3" ]
				then
					echo "${b}Keep in mind that your hostname will also become your domain [the part after the @ in your XMPP account addresses].${x}"
					echo
					read -p "${b}Now set your hostname, which must be a third level domain [subdomain] of your main domain: ${x}" newhostname
					echo
				fi
			done
			valid=n
			until [ $valid = "y" ]
			do
				read -n 1 -p "${b}Is | $newhostname | correct? (Y/n/e[xit]) ${x}" answer;
				case $answer in
				"")
					echo
					valid=y
					defined=y
					;;
				y)
					echo -e "\n"
					valid=y
					defined=y
					;;
				n)
					echo -e "\n"
					echo "${b}Ok, then please try again...${x}"
					echo
					valid=y
					defined=n
					;;
				e)
					echo -e "\n"
		        		echo "${b}Exiting...${x}"
		        		echo
		        		exit
		        		;;
				*)
					echo -e "\n"
					echo "${r}${b}Invalid option. Retry...${x}"
		        		echo
					valid=n
				defined=n
			        ;;
				esac
			done
		done
	echo $newhostname > /etc/hostname
	echo "${b}New hostname set to | $newhostname |${x}"
	echo
	hostname="$(cat /etc/hostname)"
	fi

	if [ $configoption = "3" ]
	then
		domain=$hostname
	fi

else

	echo "${b}Your hostname must be identical to your domain: $domain.${x}"
	echo
	echo "${b}Your current hostname is:${x}"
	echo
	echo " | $currhostname |"
	echo
	if [ $currhostname = $domain ]
	then
		echo "${g}${b}Your hostname matches your domain, all good!${x}"
		echo
	else
		echo "${r}${b}Your hostname does NOT match the domain you've specified.${x}"
		echo
		echo "${b}Having chosen option 2, they must be identical.${x}"
		echo
		read -p "${b}Do you want to set your hostname to match your domain? (Y/n): ${x}" -n 1 -r
		echo
		if [[ ! $REPLY =~ ^[Nn]$ ]]
		then
			echo "${b}Ok, setting hostname to match domain.${x}"
			echo
			echo $domain > /etc/hostname
			echo "${b}New hostname set to | $domain |${x}"
			echo
		else
			echo
			echo "${b}Not changing hostname. Exiting...${x}"
			echo
			exit
		fi
	fi

	hostname="$(cat /etc/hostname)"

fi
clear

echo "----------------"
echo
echo "${b}To make sure everything is correct:${x}"
echo
echo "1] Your XMPP domain [the part after the @ in your XMPP account addresses] will be:"
echo
echo "${b} | $domain | ${x}"
echo
echo "2] And therefore an XMPP account address will look as follows:"
echo
echo "${b} | mark@$domain | ${x}"
echo
echo "3] Your hostname, the location on the internet of this server, will be:"
echo
echo "${b} | $hostname | ${x}"
echo
echo "4] And therefore your aenigma admin panel will be located at:"
echo
echo "${b} | https://$hostname | ${x}"
echo
echo "----------------"
echo

read -p "${b}Does everything look all right? (Y/n): ${x}" -n 1 -r
echo
if [[ ! $REPLY =~ ^[Nn]$ ]]
then
	echo "${b}Ok, continuing.${x}"
	echo
	touch $installdir/domain
	echo "$domain" > $installdir/domain
else
	echo
	echo "${b}Ok, no worries. You can re-run this script right now and make the correct choices. Exiting...${x}"
	echo
	exit
fi
clear

echo "${b}Is this server reachable [or intended to be reachable] from the public internet?${x}"
echo
echo "[Answer no if it is only intended for local network usage (i.e. NOT reachable from outside)]"
echo
read -p "Set up the server for ${b}public internet access${x}? (Y/n): " -n 1 -r
echo
if [[ ! $REPLY =~ ^[Nn]$ ]]
then
  echo "${b}Ok, continuing in public internet accessibilty mode...${x}"
  echo
  deptype=internet
  sleep 1
else
  echo
  echo "${b}Ok, continuing in local network accessibility mode...${x}"
  echo
  echo "${b}You will need to ensure you have a local DNS server that serves all clients AND this machine as well.${x}"
  echo
  echo "${b}Open a shell to this machine and make sure it's using your local DNS server now before continuing.${x}"
  echo
  echo "${b}The DNS checks we'll be running shortly WILL FAIL if this machine's DNS settings don't point it to your local DNS server.${x}"
  echo
  deptype=local
  read -p "[press enter to continue...]"
fi
clear

if [ $deptype = "internet" ]
then
	thisipv4="$(dig +short myip.opendns.com @resolver1.opendns.com)"
	echo "${b}Now testing IPv6 connectivity...${x}"
	echo
	ipv6pingaddr="2001:4860:4860::8888"
	if ping6 -q -c 1 -W 1 $ipv6pingaddr >/dev/null
	then
		echo "${g}${b}IPv6 connectivity good.${x}"
		echo
		ipv6avail=y
	else
		counter=4
		pingacquired=y
		echo
		until ping6 -c1 $ipv6pingaddr &>/dev/null
		do
		echo "${b}Waiting $counter more seconds for IPv6 connectivity...${x}"
		echo
		if [ $counter = 0 ]
		then
			pingacquired=n
			break
		fi
		counter=$(($counter - 1))
		sleep 1
		done
		if [ $pingacquired = "y" ]
		then
			echo "${g}${b}IPv6 connectivity acquired.${x}"
			echo
			ipv6avail=y
		else
			echo "${r}${b}IPv6 connectivity not found.${x}"
			echo
			ipv6avail=n
		fi
	fi
	if [ $ipv6avail = "y" ]
	then
		thisipv6="$(dig +short -6 myip.opendns.com aaaa @resolver1.ipv6-sandbox.opendns.com)"
		echo "${b}Your IPv6 global [public] address appears to be: | $thisipv6 |${x}"
		echo
	fi
	echo "${b}Finished testing IPv6 connectivity.${x}"
	echo
else
	ipv6avail=n
	thisipv4="$(ifconfig | grep -Eo 'inet (addr:)?([0-9]*\.){3}[0-9]*' | grep -Eo '([0-9]*\.){3}[0-9]*' | grep -v '127.0.0.1')"
	echo "${b}Your machine's primary interface's IPv4 address appears to be: | $thisipv4 |${x}"
	echo
	echo "${b}If this is not your machine's correct primary interface's IPv4 address [i.e. with a private subnet address like 10., 192.168, 172.16, etc...] you must set it correctly now.${x}"
	echo
	read -p "${b}That said, is this your machine's correct primary interface's IPv4 address? (Y/n): ${x}" -n 1 -r
	echo
	if [[ ! $REPLY =~ ^[Nn]$ ]]
	then
		echo "${b}Ok, basing install on local IPv4 address: | $thisipv4 |${x}"
		echo
	else
		echo
		read -p "${b}Ok, then specify now your machine's correct primary interface's IPv4 address: ${x}" newthisipv4
		echo
		read -p "${b}Is | $newthisipv4 | correct? (y/N): ${x}" confirm && [[ $confirm == [yY] ]] || exit 1
		echo
		thisipv4=$newthisipv4
		echo "${b}Ok, basing install on newly set local IPv4 address: | $thisipv4 |${x}"
		echo
	fi
fi
sleep 1
clear



addTLSmode="notset"

if [ $configoption = 1 ]
then

	echo "${b}Having chosen config option 1, now it's time to set up the TLS [SSL] certificate that is valid for $domain on this machine.${x}"
	echo

	if [ -f $installdir/addTLSmode ]
	then
		prevaddTLSmode="$(cat $installdir/addTLSmode)"
		case "$prevaddTLSmode" in
		    "elsewhere"|"here")
			validprevaddTLSmode=y
			;;
		    *)
			validprevaddTLSmode=n
			;;
		esac
	else
		touch $installdir/addTLSmode
		validprevaddTLSmode=n
	fi

	if [ $validprevaddTLSmode = "y" ]
	then
		echo "${g}${b}You previously specified that the A/AAAA DNS records for $domain point [or are supposed to point] | $prevaddTLSmode |${x}"
		echo
		read -p "${b}Is this still true? (Y/n): ${x}" -n 1 -r
		echo
		if [[ ! $REPLY =~ ^[Nn]$ ]]
		then
			addTLSmode=$prevaddTLSmode
		else
			echo
			addTLSmode=notyetset
		fi
	else
		addTLSmode=notyetset
	fi

	if [ $addTLSmode = "notyetset" ]
	then

		echo "The certificate file required for aenigma must be an all-in-one private key + certificate + chain file."
		echo
		echo "This means the file must include, in this order, the following:"
		echo
		echo "1] Private key; 2] Leaf [server] cert; 3] Certification Chain [Intermediate cert(s) + Root cert]"
		echo
		read -p "[press enter to continue reading...]"
		clear

		echo "This certificate, if it already exists, resides on the server responding to $domain"
		echo
		echo "This is usually a web server, but check your domain/hosting infrastructure to see what server it is."
		echo
		echo "This is the IP to which your bare domain $domain is pointing to:"
		echo
		dig +noall +answer $domain
		echo
		echo "[If you see no output, then it might be misconfigured or not configured at all.]"
		echo
		read -p "[press enter to continue reading...]"
		clear

		read -p "${b}That said, is there ANOTHER [running] server that responds to $domain? (Y/n): ${x}" -n 1 -r
        	echo
        	if [[ ! $REPLY =~ ^[Nn]$ ]]
        	then
			read -p "${b}Ok, does this server have a configured TLS [SSL] certificate up and running on it? (Y/n): ${x}" -n 1 -r
	        	echo
	        	if [[ ! $REPLY =~ ^[Nn]$ ]]
	        	then
				read -p "${b}Ok, is this a Linux server? (Y/n): ${x}" -n 1 -r
                        	echo
                        	if [[ ! $REPLY =~ ^[Nn]$ ]]
                        	then
					read -p "${b}Ok, is this a Letsencrypt certificate? [if unsure, answer no] (Y/n): ${x}" -n 1 -r
	                		echo
	                		if [[ ! $REPLY =~ ^[Nn]$ ]]
	                		then
						echo "${b}Very good, therefore access that server as root [or using sudo], and download this script in the root user's home directory:${x}"
						echo
						echo "${b}https://github.com/nikksno/LetsEncrypt-Cert-Push${x}"
						echo
						echo "${b}Now configure it to push its LE TLS cert to this server by following the instructions.${x}"
						echo
					else
						echo
						echo "${b}Ok, no problem, you can adapt this script:${x}"
						echo
						echo "${b}https://github.com/nikksno/LetsEncrypt-Cert-Push${x}"
                                        	echo
						echo "${b}To have it fetch and concatenate your existing private key, TLS cert, and certification chain on the other server and push the resulting all-in-one file here periodically.${x}"
						echo
						echo "${b}Follow the instructions and adapt the paths to the existing TLS certs and private key.${x}"
						echo
					fi
				else
					echo "${b}Ok, no problem, find your TLS certificate and related files on the other server and make a simple script to periodically concatenate your existing private key, TLS cert, and certification chain on the other server and send the resulting all-in-one file over to this server, or copy it here manually [and remember to copy it over again every time you renew the cert!].${x}"
					echo
				fi
			else
				read -p "${b}Ok, no problem. Is this server a linux server? (Y/n): ${x}" -n 1 -r
                        	echo
                        	if [[ ! $REPLY =~ ^[Nn]$ ]]
                        	then
					echo "${b}Very good. You can therefore install letsencrypt on the other server, generate a cert for $domain, and copy it over here with this script:${x}"
					echo
					echo "${b}https://github.com/nikksno/LetsEncrypt-Cert-Push${x}"
					echo
				else
					echo "${b}Ok, no problem, get a TLS certificate, install it and its related files on the other server, and make a simple script to periodically concatenate your existing private key, TLS cert, and certification chain on the other server and send the resulting all-in-one file over to this server, or copy it here manually [and remember to copy it over again every time you renew the cert!].${x}"
					echo
				fi
			fi

			addTLSmode="elsewhere"
			echo "elsewhere" > $installdir/addTLSmode

		else

			echo
			echo "${b}Ok, so we'll point $domain to this server and provision a TLS certificate for it on this very server.${x}"
			echo
			echo "If you ever add a new server to respond to $domain [a webserver for instance], simply make sure you periodically send the TLS certificate you'll generate on the new server back here, either by using this script on the new server:"
			echo
			echo "https://github.com/nikksno/LetsEncrypt-Cert-Push"
			echo
			echo "[or an adaptation of it] or by doing some other manual scripting that periodically fetches the TLS cert and all of its related files on the other server, concatenates your private key, TLS cert, and certification chain on the other server, and sends the resulting all-in-one file over to this server, [and does so again every time you renew the cert!]."
			echo
			echo "For now, no need to worry about that."
			echo
			read -p "[press enter to continue reading...]"
			clear

			echo "${b}Let's point $domain and www.$domain to this server for the time being.${x}"
			echo
			echo "This is required for the TLS certificate we'll be generating shortly on this server."
			echo
			echo "The DNS checks we'll be running shortly will guide you through these settings as well."
			echo

			addTLSmode="here"
			echo "here" > $installdir/addTLSmode

		fi

	fi

	if [ $addTLSmode = "elsewhere" ]
	then

		if [ -f $installdir/domtlscertloc ]
		then
			prevdomtlscertloc="$(cat $installdir/domtlscertloc)"
			if [[ -f "$prevdomtlscertloc" && -s "$prevdomtlscertloc" ]]
			then
				validprevdomtlscertloc=y
			else
				validprevdomtlscertloc=n
			fi
		else
			touch $installdir/domtlscertloc
			validprevdomtlscertloc=n
		fi

		if [ $validprevdomtlscertloc = "y" ]
		then
			echo "${g}${b}You previously specified the all-in-one TLS certificate file for $domain to be | $prevdomtlscertloc |${x}"
			echo
			read -p "${b}Is this still correct? (Y/n): ${x}" -n 1 -r
			echo
			if [[ ! $REPLY =~ ^[Nn]$ ]]
			then
				domtlscertloc=$prevdomtlscertloc
			else
				echo
				domtlscertloc=notyetset
			fi
		else
			domtlscertloc=notyetset
		fi

		if [ $domtlscertloc = "notyetset" ]
		then

			defined=n
			until [ $defined = "y" ]
			do
				exists=n
				until [ $exists = "y" ]
				do
					newdomtlscertloc=""
					until [ ! $newdomtlscertloc = "" ]
					do
						read -p "${b}Now, in whatever way you've installed or copied to this server the all-in-one TLS cert file for $domain, specify its absolute path [i.e. /home/username/domain.pem] on this server now: ${x}" newdomtlscertloc
						echo
					done
					if [ -f $newdomtlscertloc ]
					then
						exists=y
					else
						echo "${r}${b}The specified file does not exists. Please retry...${x}"
						echo
						exists=n
					fi
				done
				valid=n
				until [ $valid = "y" ]
				do
					read -n 1 -p "${b}Is | $newdomtlscertloc | correct? (Y/n/e[xit]) ${x}" answer;
					case $answer in
					"")
						echo
						valid=y
						defined=y
						;;
					y)
						echo -e "\n"
						valid=y
						defined=y
						;;
					n)
						echo -e "\n"
						echo "${b}Ok, then please try again...${x}"
						echo
						valid=y
						defined=n
						;;
					e)
						echo -e "\n"
			        		echo "${b}Exiting...${x}"
			        		echo
			        		exit
			        		;;
					*)
						echo -e "\n"
						echo "${r}${b}Invalid option. Retry...${x}"
			        		echo
						valid=n
					defined=n
				        ;;
					esac
				done
			done
		echo $newdomtlscertloc > $installdir/domtlscertloc
		echo "${b}New location for all-in-one TLS cert file for $domain set to | $newdomtlscertloc |${x}"
		echo
		domtlscertloc="$(cat $installdir/domtlscertloc)"
		fi

	fi

fi
sleep 1
clear

if [ $addTLSmode = "here" ]
then
	declare -a dnsarray=(
                "hostname"
                "domain"
		"XMPP"
		"SRV"
                )
elif [ $addTLSmode = "elsewhere" ]
then
        declare -a dnsarray=(
                "hostname"
		"XMPP"
		"SRV"
                )
else
	declare -a dnsarray=(
                "hostname"
		"XMPP"
                )
fi

if [ $ipv6avail = "y" ]
then
        declare -a iparray=(
                "v4"
                "v6"
                )
else
        declare -a iparray=(
                "v4"
                )
fi

for dnstype in "${dnsarray[@]}"
do

	if [ $dnstype = "hostname" ]
	then
		dnschecktype=$hostname
	else
		dnschecktype=$domain
	fi

	for ipversion in "${iparray[@]}"
	do

	echo "${b}Now let's make sure your $dnstype's IP$ipversion DNS settings are correct.${x}"
	echo

	if [ $dnstype = "hostname" ]
	then
		declare -A digarray=(
			[HN]=""
			[www]="www."
		)
	elif [ $dnstype = "domain" ]
	then
		declare -A digarray=(
			[HN]=""
			[www]="www."
		)
	elif [ $dnstype = "XMPP" ]
	then
		declare -A digarray=(
			[xc]="xc."
			[xe]="xe."
			[xi]="xi."
		)
	elif [ $dnstype = "SRV" ]
	then
		declare -A digarray=(
			[sj]="_jabber._tcp."
			[ss]="_xmpp-server._tcp."
			[sc]="_xmpp-client._tcp."
		)
	fi

	# [xc]="XMPP messaging groups [aka conferences / MUCs in XMPP lingo]."
	# [xu]="XMPP HTTP uploads."
	# [xe]="the ejabberd MOD_ECHO module."
	# [xp]="the ejabberd MOD_PUBSUB module."
	# [xi]="join channels on IRC servers."

	# Since you've chosen option 1, your domain is different from your hostname.
	# Therefore, we have to set some DNS 'SRV' records which will direct XMPP connections for $domain accounts to this server.

	digarrayiter=0

	for i in "${!digarray[@]}"
	do

		digarrayiter=$(($digarrayiter + 1))
		echo "${b}$digarrayiter] Now checking the ${digarray[$i]}$dnschecktype DNS record in IP$ipversion...${x}"
		echo
		sleep 1

		accept=n
		until [ $accept = "y" ]
		do

		if [ ! $dnstype = "SRV" ]
		then
			if [ $ipversion = "v4" ]
			then
	                	thisip=$thisipv4
				digresult="$(getent ahostsv4 ${digarray[$i]}$dnschecktype. | head -1 |sed 's/ .*//')"
	                	rectype="A"
			else
	                	thisip=$thisipv6
	                	digresult="$(getent ahostsv6 ${digarray[$i]}$dnschecktype. | grep -v $thisipv4 | head -1 | sed 's/ .*//')"
	                	rectype="AAAA"
			fi
		else
			if [ ! ${digarray[$i]} = "_xmpp-client._tcp." ]
			then
				thisip="0 0 5269 $hostname."
			else
				thisip="0 0 5222 $hostname."
			fi
			digresult="$(dig +short -t srv ${digarray[$i]}$domain)"
			rectype="SRV"
		fi

				if [ -z "$digresult" ]
				then
					echo "${r}${b}The ${digarray[$i]}$dnschecktype IP$ipversion record does NOT appear to be at all set.${x}"
					echo
					echo "${b}Please ensure you set your DNS record as follows:${x}"
					echo
					echo -e "| ${digarray[$i]}$dnschecktype\t\t$rectype\t$thisip |"
					echo
					result=notset
				else
					if [ "$digresult" = "$thisip" ]
					then
						echo "${g}${b}The ${digarray[$i]}$dnschecktype IP$ipversion record appears to resolve correctly to this server.${x}"
						echo
						echo -e "| ${digarray[$i]}$dnschecktype\t\t$rectype\t$thisip |"
						echo
						result=ok
						sleep 1
					else
						echo "${r}${b}The ${digarray[$i]}$dnschecktype IP$ipversion record does NOT appear to correctly resolve to this server.${x}"
						echo
						echo "${b}This is the result of a DNS query for ${digarray[$i]}$dnschecktype:${x}"
						echo
						echo "$digresult"
						echo
						echo "${b}Please set it instead to:${x}"
						echo
						echo -e "| ${digarray[$i]}$dnschecktype\t\t$rectype\t$thisip |"
						echo
						result=incorrect
					fi
				fi

				if [ ! $result = "ok" ]
				then
					valid=n
					until [ $valid = "y" ]
					do
						read -n 1 -p "${b}Test again?${x} (${b}Y${x}[es]/${b}s${x}[kip]/${b}e${x}[xit]) " answer;
						case $answer in
						"")
							echo
							valid=y
							accept=n
							;;
						y)
							echo -e "\n"
							valid=y
							accept=n
							;;
						s)
							echo -e "\n"
							echo "${b}Skipping DNS check for this record...${x}"
							echo
							valid=y
							accept=y
							;;
						e)
							echo -e "\n"
	        					echo "${b}Exiting...${x}"
	        					echo
	        					exit
	        					;;
						*)
							echo -e "\n"
							echo "${b}Invalid option. Retry...${x}"
	        					echo
							valid=n
							accept=n
			        			;;
						esac
					done
				else
					accept=y
				fi
				clear
			done
		done

		echo "${b}Finished checking your $dnstype's IP$ipversion DNS settings.${x}"
		echo
		sleep 1

	done

done
clear

echo "${b}Now setting UFW rules...${x}"
echo

ufw allow 5222
ufw allow 5269
ufw allow 5444
ufw allow 80
ufw allow 443

echo
echo "${b}Finished setting UFW rules.${x}"
echo
sleep 1

echo "${b}Now installing easyengine...${x}"
echo
wget -qO ee rt.cx/ee && sudo bash ee
echo
echo "${b}Finished installing easyengine.${x}"
echo
sleep 1

echo "${b}Now creating easyengine site for $hostname, generating its TLS certificate, and installing it...${x}"
echo
ee site create $hostname
echo
echo "${b}Finished creating easyengine site for $hostname.${x}"
echo
sleep 1

echo "${b}Now setting custom nginx config for $hostname...${x}"
echo
sed -i "s/example.im/${hostname}/g" $sourcedir/conf/nginx/hostname.conf
cp $sourcedir/conf/nginx/hostname.conf /etc/nginx/sites-available/$hostname
service nginx reload
echo "${b}Finished setting custom nginx config for $hostname.${x}"
echo
sleep 1

echo "${b}Now updating easyengine site $hostname to TLS encrypted with LetsEncrypt...${x}"
echo
ee site update $hostname  --le
echo
echo "${b}Finished updating easyengine site $hostname to TLS encrypted with LetsEncrypt...${x}"
echo

echo "${b}Now creating all-in-one TLS file for $hostname for ejabberd...${x}"
echo
touch $tlsdir/hostname.pem
cat /etc/letsencrypt/live/$hostname/privkey.pem > $tlsdir/hostname.pem
cat /etc/letsencrypt/live/$hostname/fullchain.pem >> $tlsdir/hostname.pem
echo "${b}Finished creating all-in-one TLS file for $hostname for ejabberd.${x}"
echo
sleep 1

echo "${b}Now setting index.html in docroot for $hostname...${x}"
echo
cp $sourcedir/conf/web/hostname/index.html /var/www/$hostname/htdocs/
echo "${b}Finished setting index.html in docroot for $hostname.${x}"
echo
sleep 1

if [ $addTLSmode = "here" ]
then

	echo "${b}Since you've chosen to provision a TLS certificate for $domain on this server, now we're now going to do so.${x}"
 	echo

	echo "${b}Now creating easyengine site for $domain, generating its TLS certificate, and installing it...${x}"
	echo
	ee site create $domain
	echo
	echo "${b}Finished creating easyengine site for $domain.${x}"
	echo
	sleep 1

	echo "${b}Now setting custom nginx config for $domain...${x}"
	echo
	sed -i "s/example.im/${domain}/g" $sourcedir/conf/nginx/domain.conf
	cp $sourcedir/conf/nginx/domain.conf /etc/nginx/sites-available/$domain
	service nginx reload
	echo "${b}Finished setting custom nginx config for $domain.${x}"
	echo
	sleep 1

	echo "${b}Now updating easyengine site $domain to TLS encrypted with LetsEncrypt...${x}"
	echo
	ee site update $domain  --le
	echo
	echo "${b}Finished updating easyengine site $domain to TLS encrypted with LetsEncrypt...${x}"
	echo

	echo "${b}Now adding IPv6 support to the HTTPS version of the $domain site...${x}"
	echo
	sed -i "s/example.im/${domain}/g" $sourcedir/conf/nginx/ssl-domain.conf
	cp $sourcedir/conf/nginx/ssl-domain.conf /var/www/$domain/conf/nginx/ssl.conf
	echo "${b}Finished adding IPv6 support to the HTTPS version of the $domain site...${x}"
	echo

	echo "${b}Now adding IPv6 support to the HTTPS redirect for the $domain site...${x}"
	echo
	sed -i "s/example.im/${domain}/g" $sourcedir/conf/nginx/force-ssl-domain.conf
	cp $sourcedir/conf/nginx/force-ssl-domain.conf /etc/nginx/conf.d/force-ssl-$domain.conf
	echo "${b}Finished adding IPv6 support to the HTTPS redirect for the $domain site...${x}"
	echo

	echo "${b}Now creating all-in-one TLS file for $domain for ejabberd...${x}"
	echo
	touch $tlsdir/domain.pem
	cat /etc/letsencrypt/live/$domain/privkey.pem > $tlsdir/domain.pem
	cat /etc/letsencrypt/live/$domain/fullchain.pem >> $tlsdir/domain.pem
	domtlscertloc=$tlsdir/domain.pem
	echo "${b}Finished creating all-in-one TLS file for $domain for ejabberd...${x}"
	echo
	sleep 1

	echo "${b}Now setting index.html in docroot for $domain...${x}"
	echo
	cp $sourcedir/conf/web/domain/index.html /var/www/$domain/htdocs/
	echo "${b}Finished setting index.html in docroot for $domain.${x}"
	echo
	sleep 1

fi

### only add IPv6 to hostname site after LE TLS cert has been provisioned for domain otherwise .well-known check will fail due to wrong webroot

echo "${b}Now adding IPv6 support to the HTTPS version of the $hostname site...${x}"
echo
sed -i "s/example.im/${hostname}/g" $sourcedir/conf/nginx/ssl-hostname.conf
cp $sourcedir/conf/nginx/ssl-hostname.conf /var/www/$hostname/conf/nginx/ssl.conf
echo "${b}Finished adding IPv6 support to the HTTPS version of the $hostname site...${x}"
echo

echo "${b}Now adding IPv6 support to the HTTPS redirect for the $hostname site...${x}"
echo
sed -i "s/example.im/${hostname}/g" $sourcedir/conf/nginx/force-ssl-hostname.conf
cp $sourcedir/conf/nginx/force-ssl-hostname.conf /etc/nginx/conf.d/force-ssl-$hostname.conf
echo "${b}Finished adding IPv6 support to the HTTPS redirect for the $hostname site...${x}"
echo

service nginx restart

echo "${b}Now creating ejabberd directory and setting custom aenigma config to /etc/ejabberd/ejabberd.yml...${x}"
echo
mkdir -p /etc/ejabberd/
touch /etc/ejabberd/ejabberd.yml
sed -i "s/example.im/${domain}/g" $sourcedir/conf/ejabberd/ejabberd.yml
sed -i "s/hostname.im/${hostname}/g" $sourcedir/conf/ejabberd/ejabberd.yml
sed -i "s/xu.@HOST@/${hostname}/g" $sourcedir/conf/ejabberd/ejabberd.yml
sed -i "s/xp.@HOST@/${hostname}/g" $sourcedir/conf/ejabberd/ejabberd.yml
if [ $configoption = 1 ]
then
### [old] direct main cert substitution
# sed -i "s|${tlsdir}/hostname.pem|${domtlscertloc}|g" $sourcedir/conf/ejabberd/ejabberd.yml
### [new] append ${domtlscertloc} in host_config
sed -i "s|example.im|${domain}|g" $sourcedir/conf/ejabberd/ejabberd-tlsaddition.txt
sed -i "s|pathtofile|${domtlscertloc}|g" $sourcedir/conf/ejabberd/ejabberd-tlsaddition.txt
sed -i '/## aenigma_host_config_placeholder_start:/,/## aenigma_host_config_placeholder_end:/{//!d}' $sourcedir/conf/ejabberd/ejabberd.yml
sed -i "/## aenigma_host_config_placeholder_start:/ r $sourcedir/conf/ejabberd/ejabberd-tlsaddition.txt" $sourcedir/conf/ejabberd/ejabberd.yml
fi
cp $sourcedir/conf/ejabberd/ejabberd.yml /etc/ejabberd/ejabberd.yml
echo "${b}Finished creating ejabberd directory and setting custom aenigma config to /etc/ejabberd/ejabberd.yml.${x}"
echo
sleep 1

echo "${b}Now installing SSLH...${x}"
echo
sshport="$(cat /root/os-dfbs/ssh-port)"
apt-get -y install sslh
if [ $ipv6avail = "y" ]
then
	sed -i "s|thisipv4|${thisipv4}:443 -p ${thisipv6}|g" $sourcedir/conf/sslh/sslh
else
	sed -i "s|thisipv4|${thisipv4}|g" $sourcedir/conf/sslh/sslh
fi
sed -i "s|sshport|${sshport}|g" $sourcedir/conf/sslh/sslh
cp $sourcedir/conf/sslh/sslh /etc/default/sslh
service sslh start
echo
echo "${b}Finished installing SSLH.${x}"
echo

echo "${b}Now installing ejabberd...${x}"
echo
currdistro="$(lsb_release --codename | cut -f2)"
apt-get -y install apt-transport-https
echo "deb https://apt.jabber.at $currdistro ejabberd" > /etc/apt/sources.list.d/jabber.at.list
wget -qO- https://apt.jabber.at/gpg-key | apt-key add -
apt-get update
export DEBIAN_FRONTEND=noninteractive ; apt-get install -y -o Dpkg::Options::="--force-confdef" -o Dpkg::Options::="--force-confold" --force-yes ejabberd
echo
echo "${b}Finished installing ejabberd.${x}"
echo
sleep 1

echo "${b}Now creating uploads directory...${x}"
echo
mkdir -p /etc/ejabberd/uploads/
echo "${b}Finished creating uploads directory.${x}"
echo
sleep 1

echo "${b}Now creating HTTP fileserver directory...${x}"
echo
mkdir -p /var/www/ejabberd/
echo "${b}Finished creating HTTP fileserver directory.${x}"
echo
sleep 1

echo "${b}Now creating logfile...${x}"
echo
touch /var/log/ejabberd/www_access.log
echo "${b}Finished creating logfile.${x}"
echo

echo "${b}Now securing permissions...${x}"
echo
chown -R ejabberd:ejabberd $tlsdir
chmod -R 700 $tlsdir
chown -R ejabberd:ejabberd /etc/ejabberd/uploads/
chmod -R 755 /etc/ejabberd/uploads/
chown -R ejabberd:ejabberd /var/www/ejabberd/
chmod -R 755 /var/www/ejabberd/
echo "${b}Finished securing permissions.${x}"
echo
sleep 1

echo "${b}Now stopping ejabberd...${x}"
echo
/usr/sbin/ejabberdctl stop
sleep 8
echo "${b}Finished stopping ejabberd.${x}"
echo
sleep 1

echo "${b}Now starting ejabberd...${x}"
/usr/sbin/ejabberdctl start
echo
sleep 8
/usr/sbin/ejabberdctl status
echo
sleep 1
echo "${b}Finished starting ejabberd.${x}"
echo
sleep 1

echo "${b}Now registering ejabberd admin user [if it doesn't yet exist]...${x}"
echo
ejbdadminpw=$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 24 | head -n 1)
/usr/sbin/ejabberdctl register admin $domain $ejbdadminpw &> /dev/null
echo "${b}Finished registering ejabberd admin user.${x}"
echo
sleep 1
clear

if [ -f $installdir/ejabberdadminpwset ]
then
	read -p "${b}Leave ejabberd admin user password the same as previously set? (Y/n): ${x}" -n 1 -r
	echo
	if [[ ! $REPLY =~ ^[Nn]$ ]]
	then
		echo "${b}Skipping ejabberd admin user password reset.${x}"
		echo
		ejbdadminpwreset=n
	else
		echo
		echo "${b}Ok, resetting ejabberd admin user password to: | $ejbdadminpw |${x}"
		echo
		/usr/sbin/ejabberdctl change_password admin $domain $ejbdadminpw
		ejbdadminpwreset=y
	fi
else
	touch $installdir/ejabberdadminpwset
	ejbdadminpwreset=y
fi

echo "${b}Now updating ejabberd's module repo...${x}"
echo
/usr/sbin/ejabberdctl modules_update_specs
echo "${b}Finished updating ejabberd's module repo...${x}"
echo
sleep 1

echo "${b}Now creating 'ADMIN:EVERYBODY' and 'ADMIN:ONLINE' shared roster groups [admin@$domain can see 'everybody' and 'all online']...${x}"
echo
/usr/sbin/ejabberdctl srg_create everybody $domain "everybody [$domain]" "This aenigma group includes every user on this domain" ""
/usr/sbin/ejabberdctl srg-user-add @all@ localhost everybody $domain
/usr/sbin/ejabberdctl srg_create online $domain "online [$domain]" "This aenigma group includes every user who is online on this domain" ""
/usr/sbin/ejabberdctl srg-user-add @online@ localhost online $domain
/usr/sbin/ejabberdctl srg_create admin $domain admin "This is a shared roster group set by aenigma" "everybody\\nonline"
/usr/sbin/ejabberdctl srg-user-add admin $domain admin $domain
echo "${b}Finished creating shared roster groups.${x}"
echo
sleep 1
clear

echo "${g}${b}You can finally log in:${x}"
echo
echo "${b}https://$hostname${x}"
echo
echo "${b}admin@$domain${x}"
echo

if [ $ejbdadminpwreset = "y" ]
then
	echo "${b}$ejbdadminpw${x}"
	echo
else
	echo "${b}[your previously set password]${x}"
	echo
fi

read -p "[press enter to continue reading...]"
clear

if [ -f $tlsdir/dh.pem ]
then
	echo "${g}${b}DHparam file found. Skipping generation...${x}"
	echo
else
	echo "${b}One last thing: to make your TLS connections even more secure, you can generate a file called DH parameters file.${x}"
	echo
	echo "${b}To do so, simply answer yes, but be aware that this is a very time consuming cryptographic operation, although it must only be performed once.${x}"
	echo
	read -p "${b}Generate openssl DHparams file? (Y/n): ${x}" -n 1 -r
	echo
	if [[ ! $REPLY =~ ^[Nn]$ ]]
	then
		echo "${b}Ok, proceeding with DHparams file generation...${x}"
		echo
		openssl dhparam -out $tlsdir/dh.pem.incomplete 4096
		mv $tlsdir/dh.pem.incomplete $tlsdir/dh.pem
		echo
	else
		echo
		echo "${b}Skipping DHparams generation.${x}"
		echo
		echo "${b}You can always generate them at a later time by executing:${x}"
		echo
		echo "${b}openssl dhparam -out $tlsdir/dh.pem.incomplete 4096${x}"
		echo
		echo "${b}[and making sure you let the command run until it exits]. Once it's done, execute:${x}"
		echo
		echo "${b}mv $tlsdir/dh.pem.incomplete $tlsdir/dh.pem${x}"
		echo
		/usr/sbin/ejabberdctl restart
	fi
	echo "${b}Finished generating DHparams.${x}"
	echo
fi
sleep 1
clear

echo "${b}Now removing installer directory...${x}"
echo
echo "Run ${b}git clone https://github.com/openspace42/aenigma${x} once again to download the latest installer!"
echo
echo "${b}Finished removing installer directory...${x}"

rm -r aenigma/

echo "${g}${b}aenigma installation complete!${x}"
echo

exit
