#!/usr/bin/env bash

################################################################################

### Set bash environment error management

set -eu

################################################################################

if [ "${custom_output-null}" = "v" ]
then
    echo
    echo "Printing verbose output as per | -o v |."
    echo
    set -x
fi

################################################################################

if [[ "${@#--return-check}" = "$@" ]]
then
    echo
    echo "This script must not be run directly."
    echo
    echo "You should instead run the | setup | script and it will take care of the installation itself."
    echo
    echo "Exiting..."
    echo
    exit 1
fi

################################################################################

### Determine script execution directory and install directory.

if [ -L "${BASH_SOURCE}" ]
then

    ### This file is being executed via a symlink.
    ### Identify the parent directory of the target file

    link_target="$(readlink ${BASH_SOURCE})"
    exec_dir="${link_target%/*}"

else

    ### This file is being directly executed.
    ### Identify our parent directory.

    exec_dir="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

fi

exec_dir_trim_2="$( echo ${exec_dir} | cut -f 1,2,3 -d'/')"
exec_dir_trim_3="$( echo ${exec_dir} | cut -f 1,2,3,4 -d'/')"

if [ -f "${exec_dir_trim_2}/functions" ]
then
	exec_dir_root="${exec_dir_trim_2}"
else
	if [ -f "${exec_dir_trim_3}/functions" ]
	then
		exec_dir_root="${exec_dir_trim_3}"
	else
		echo "Functions file not found in any second or third level parent directory of: | ${exec_dir} |."
		echo
		echo "Exiting..."
		echo
        exit 1
	fi
fi

### Source local functions file.

. "$exec_dir_root/functions"

################################################################################

### Define formatting

synthia-define_formatting

################################################################################

### Ensure that the dna version required hasn't changed due to a new version of this very project being installed

if [ -z "${custom_dna_version-}" ]
then

    ### No custom dna version was requested upon running the setup script
    ### Let's check if an upgrade to the project itself has changed the required dna version

    dna_selected_vers="$(cat "${os_base_dir}/dna/version_installed")"

    if [ "${dna_version}" != "${dna_selected_vers}" ]
    then

        echo "${l-}${b-}Now upgrading version of dna as required by the newly upgraded version of this very project which was just fetched...${x-}"
        echo

        synthia-download_dna

        echo

    fi

fi

################################################################################

### Source dna

synthia-source_dna

################################################################################

### Define variables

synthia-define_vars

################################################################################

### Check for any already existing installation

dna-check_install_version

################################################################################

### Install repo contents into destination dir

dna-echo -m "Now installing repository contents into destination directory."

#### Install rsync if it isn't yet [like in Debian]

if ! dpkg -s rsync &> /dev/null
then
    dna-install_dependencies -p "rsync"
fi

#### Proceed with rsync

rsync -aAXx "${source_dir}/" "${install_dir}/" --include=tools*** --include=functions --exclude="*"

dna-echo -m $"${g-}Finished installing repository contents into destination directory."

################################################################################

### Head install

dna-echo -m "Initiating install..."

synthia-perform_installation

################################################################################

### Mark installer as completed successfully

touch "$source_dir/install_complete"
